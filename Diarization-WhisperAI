{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chrissyhroberts/Diarization-WhisperAI/blob/main/Copy_of_Pyannote_plays_and_Whisper_rhymes_v_2_0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Diarised transcriptions and translations using Pyannote & Whisper AI.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "f3DvVwYV0m91"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Setup"
      ],
      "metadata": {
        "id": "nfvIZ67J3Brq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Install required libraries\n"
      ],
      "metadata": {
        "id": "OW3W0zEVxCrZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pydub\n",
        "!pip install light-the-torch\n",
        "!ltt install torch==1.13.1 torchvision==0.14.1 torchaudio==0.13.1\n",
        "!pip install  git+https://github.com/hmmlearn/hmmlearn.git\n",
        "!pip install  git+https://github.com/pyannote/pyannote-audio.git@develop\n",
        "!pip install git+https://github.com/openai/whisper.git"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MUAYiW1zxT-V",
        "outputId": "215e26b4-e251-4a20-9170-30c81841c5bc"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pydub in /usr/local/lib/python3.10/dist-packages (0.25.1)\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/base_command.py\", line 169, in exc_logging_wrapper\n",
            "    status = run_func(*args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/req_command.py\", line 242, in wrapper\n",
            "    return func(self, options, args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/commands/install.py\", line 441, in run\n",
            "    conflicts = self._determine_conflicts(to_install)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/commands/install.py\", line 572, in _determine_conflicts\n",
            "    return check_install_conflicts(to_install)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/operations/check.py\", line 101, in check_install_conflicts\n",
            "    package_set, _ = create_package_set_from_installed()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/operations/check.py\", line 43, in create_package_set_from_installed\n",
            "    package_set[name] = PackageDetails(dist.version, dependencies)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/metadata/pkg_resources.py\", line 168, in version\n",
            "    return parse_version(self._dist.version)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/packaging/version.py\", line 49, in parse\n",
            "    return Version(version)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/packaging/version.py\", line 264, in __init__\n",
            "    match = self._regex.search(version)\n",
            "KeyboardInterrupt\n",
            "\n",
            "During handling of the above exception, another exception occurred:\n",
            "\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/bin/pip3\", line 8, in <module>\n",
            "    sys.exit(main())\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/main.py\", line 79, in main\n",
            "    return command.main(cmd_args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/base_command.py\", line 101, in main\n",
            "    return self._main(args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/base_command.py\", line 223, in _main\n",
            "    return run(options, args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/base_command.py\", line 206, in exc_logging_wrapper\n",
            "    logger.critical(\"Operation cancelled by user\")\n",
            "  File \"/usr/lib/python3.10/logging/__init__.py\", line 1524, in critical\n",
            "    self._log(CRITICAL, msg, args, **kwargs)\n",
            "  File \"/usr/lib/python3.10/logging/__init__.py\", line 1622, in _log\n",
            "    record = self.makeRecord(self.name, level, fn, lno, msg, args,\n",
            "  File \"/usr/lib/python3.10/logging/__init__.py\", line 1591, in makeRecord\n",
            "    rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,\n",
            "  File \"/usr/lib/python3.10/logging/__init__.py\", line 332, in __init__\n",
            "    self.threadName = threading.current_thread().name\n",
            "  File \"/usr/lib/python3.10/threading.py\", line 1438, in current_thread\n",
            "    return _active[get_ident()]\n",
            "KeyboardInterrupt\n",
            "^C\n",
            "Requirement already satisfied: light-the-torch in /usr/local/lib/python3.10/dist-packages (0.7.5)\n",
            "Requirement already satisfied: pip<23.3,>=22.3 in /usr/local/lib/python3.10/dist-packages (from light-the-torch) (23.1.2)\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py\", line 3108, in _dep_map\n",
            "    return self.__dep_map\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py\", line 2901, in __getattr__\n",
            "    raise AttributeError(attr)\n",
            "AttributeError: _DistInfoDistribution__dep_map\n",
            "\n",
            "During handling of the above exception, another exception occurred:\n",
            "\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/base_command.py\", line 169, in exc_logging_wrapper\n",
            "    status = run_func(*args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/req_command.py\", line 242, in wrapper\n",
            "    return func(self, options, args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/commands/install.py\", line 441, in run\n",
            "    conflicts = self._determine_conflicts(to_install)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/commands/install.py\", line 572, in _determine_conflicts\n",
            "    return check_install_conflicts(to_install)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/operations/check.py\", line 101, in check_install_conflicts\n",
            "    package_set, _ = create_package_set_from_installed()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/operations/check.py\", line 42, in create_package_set_from_installed\n",
            "    dependencies = list(dist.iter_dependencies())\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/metadata/pkg_resources.py\", line 216, in iter_dependencies\n",
            "    return self._dist.requires(extras)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py\", line 2821, in requires\n",
            "    dm = self._dep_map\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py\", line 3110, in _dep_map\n",
            "    self.__dep_map = self._compute_dependencies()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py\", line 3120, in _compute_dependencies\n",
            "    reqs.extend(parse_requirements(req))\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pkg_resources/__init__.py\", line 3173, in __init__\n",
            "    super(Requirement, self).__init__(requirement_string)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/packaging/requirements.py\", line 102, in __init__\n",
            "    req = REQUIREMENT.parseString(requirement_string)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 1131, in parse_string\n",
            "    loc, tokens = self._parse(instring, 0)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 3886, in parseImpl\n",
            "    loc, exprtokens = e._parse(instring, loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 4114, in parseImpl\n",
            "    return e._parse(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 3886, in parseImpl\n",
            "    loc, exprtokens = e._parse(instring, loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 4959, in parseImpl\n",
            "    loc, tokens = self_expr._parse(instring, loc, doActions, callPreParse=False)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 3886, in parseImpl\n",
            "    loc, exprtokens = e._parse(instring, loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 856, in _parseNoCache\n",
            "    tokens = fn(instring, tokens_start, ret_tokens)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 291, in wrapper\n",
            "    ret = func(*args[limit:])\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/packaging/requirements.py\", line 71, in <lambda>\n",
            "    lambda s, l, t: Marker(s[t._original_start : t._original_end])\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/packaging/markers.py\", line 278, in __init__\n",
            "    self._markers = _coerce_parse_result(MARKER.parseString(marker))\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 1131, in parse_string\n",
            "    loc, tokens = self._parse(instring, 0)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 3886, in parseImpl\n",
            "    loc, exprtokens = e._parse(instring, loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 5226, in parseImpl\n",
            "    return super().parseImpl(instring, loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 4375, in parseImpl\n",
            "    return self.expr._parse(instring, loc, doActions, callPreParse=False)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 3864, in parseImpl\n",
            "    loc, resultlist = self.exprs[0]._parse(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 4114, in parseImpl\n",
            "    return e._parse(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 4375, in parseImpl\n",
            "    return self.expr._parse(instring, loc, doActions, callPreParse=False)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 3886, in parseImpl\n",
            "    loc, exprtokens = e._parse(instring, loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 4114, in parseImpl\n",
            "    return e._parse(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 817, in _parseNoCache\n",
            "    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 4114, in parseImpl\n",
            "    return e._parse(\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_vendor/pyparsing/core.py\", line 823, in _parseNoCache\n",
            "    tokens = self.postParse(instring, loc, tokens)\n",
            "KeyboardInterrupt\n",
            "\n",
            "During handling of the above exception, another exception occurred:\n",
            "\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/bin/pip3\", line 8, in <module>\n",
            "    sys.exit(main())\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/main.py\", line 79, in main\n",
            "    return command.main(cmd_args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/base_command.py\", line 101, in main\n",
            "    return self._main(args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/base_command.py\", line 223, in _main\n",
            "    return run(options, args)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/pip/_internal/cli/base_command.py\", line 206, in exc_logging_wrapper\n",
            "    logger.critical(\"Operation cancelled by user\")\n",
            "  File \"/usr/lib/python3.10/logging/__init__.py\", line 1524, in critical\n",
            "    self._log(CRITICAL, msg, args, **kwargs)\n",
            "  File \"/usr/lib/python3.10/logging/__init__.py\", line 1622, in _log\n",
            "    record = self.makeRecord(self.name, level, fn, lno, msg, args,\n",
            "  File \"/usr/lib/python3.10/logging/__init__.py\", line 1591, in makeRecord\n",
            "    rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,\n",
            "  File \"/usr/lib/python3.10/logging/__init__.py\", line 283, in __init__\n",
            "    def __init__(self, name, level, pathname, lineno,\n",
            "KeyboardInterrupt\n",
            "^C\n",
            "\u001b[31mERROR: Operation cancelled by user\u001b[0m\u001b[31m\n",
            "\u001b[0mCollecting git+https://github.com/hmmlearn/hmmlearn.git\n",
            "  Cloning https://github.com/hmmlearn/hmmlearn.git to /tmp/pip-req-build-3xlei3py\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/hmmlearn/hmmlearn.git /tmp/pip-req-build-3xlei3py\n",
            "  Resolved https://github.com/hmmlearn/hmmlearn.git to commit 23c0f132bd66280b46b7f898dc51812629c8bdb7\n",
            "\u001b[31mERROR: Operation cancelled by user\u001b[0m\u001b[31m\n",
            "\u001b[0m  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hTraceback (most recent call last):\n",
            "\n",
            "^C\n",
            "Collecting git+https://github.com/openai/whisper.git\n",
            "  Cloning https://github.com/openai/whisper.git to /tmp/pip-req-build-bklx371i\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/openai/whisper.git /tmp/pip-req-build-bklx371i\n",
            "  Resolved https://github.com/openai/whisper.git to commit e8622f9afc4eba139bf796c210f5c01081000472\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from openai-whisper==20230314) (2.0.0)\n",
            "Requirement already satisfied: numba in /usr/local/lib/python3.10/dist-packages (from openai-whisper==20230314) (0.56.4)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from openai-whisper==20230314) (1.23.5)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from openai-whisper==20230314) (2.0.1)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from openai-whisper==20230314) (4.66.1)\n",
            "Requirement already satisfied: more-itertools in /usr/local/lib/python3.10/dist-packages (from openai-whisper==20230314) (10.1.0)\n",
            "Requirement already satisfied: tiktoken==0.3.3 in /usr/local/lib/python3.10/dist-packages (from openai-whisper==20230314) (0.3.3)\n",
            "Requirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.10/dist-packages (from tiktoken==0.3.3->openai-whisper==20230314) (2023.6.3)\n",
            "Requirement already satisfied: requests>=2.26.0 in /usr/local/lib/python3.10/dist-packages (from tiktoken==0.3.3->openai-whisper==20230314) (2.31.0)\n",
            "Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->openai-whisper==20230314) (3.27.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->openai-whisper==20230314) (3.12.2)\n",
            "Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->openai-whisper==20230314) (16.0.6)\n",
            "Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba->openai-whisper==20230314) (0.39.1)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from numba->openai-whisper==20230314) (67.7.2)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (4.7.1)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (1.12)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (3.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (3.1.2)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu11==11.7.99 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (11.7.99)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu11==11.7.99 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (11.7.99)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu11==11.7.101 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (11.7.101)\n",
            "Requirement already satisfied: nvidia-cudnn-cu11==8.5.0.96 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (8.5.0.96)\n",
            "Requirement already satisfied: nvidia-cublas-cu11==11.10.3.66 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (11.10.3.66)\n",
            "Requirement already satisfied: nvidia-cufft-cu11==10.9.0.58 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (10.9.0.58)\n",
            "Requirement already satisfied: nvidia-curand-cu11==10.2.10.91 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (10.2.10.91)\n",
            "Requirement already satisfied: nvidia-cusolver-cu11==11.4.0.1 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (11.4.0.1)\n",
            "Requirement already satisfied: nvidia-cusparse-cu11==11.7.4.91 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (11.7.4.91)\n",
            "Requirement already satisfied: nvidia-nccl-cu11==2.14.3 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (2.14.3)\n",
            "Requirement already satisfied: nvidia-nvtx-cu11==11.7.91 in /usr/local/lib/python3.10/dist-packages (from torch->openai-whisper==20230314) (11.7.91)\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.10/dist-packages (from nvidia-cublas-cu11==11.10.3.66->torch->openai-whisper==20230314) (0.41.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26.0->tiktoken==0.3.3->openai-whisper==20230314) (3.2.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26.0->tiktoken==0.3.3->openai-whisper==20230314) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26.0->tiktoken==0.3.3->openai-whisper==20230314) (2.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26.0->tiktoken==0.3.3->openai-whisper==20230314) (2023.7.22)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->openai-whisper==20230314) (2.1.3)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->openai-whisper==20230314) (1.3.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Import all libraries\n",
        "\n"
      ],
      "metadata": {
        "id": "bzAtNEblwk00"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import timedelta\n",
        "from google.colab import drive\n",
        "import json\n",
        "import locale\n",
        "locale.getpreferredencoding = lambda: \"UTF-8\"\n",
        "from pathlib import Path\n",
        "from pyannote.audio import Pipeline\n",
        "from pydub import AudioSegment\n",
        "import re\n",
        "import torch\n",
        "import whisper\n",
        "import os"
      ],
      "metadata": {
        "id": "YtovrtlGwtst"
      },
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Mount Google Drive"
      ],
      "metadata": {
        "id": "xtlCXpHr2pkQ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B3tqC8m8fyCJ",
        "outputId": "797d81af-0d01-46c3-c53a-65a5f33b5e19",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "drive_mount_path = Path(\"/content/drive\")\n",
        "drive.mount(str(drive_mount_path))\n",
        "drive_mount_path /= \"MyDrive\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wtljXaTXnowa"
      },
      "source": [
        "*italicised text*# Preparing the audio file"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N7TPgEVW8XeH"
      },
      "source": [
        "\n",
        "## Specify details of run\n",
        "\n",
        "This script assumes that you have the source file (audio/video) saved on your google drive.\n",
        "\n",
        "* Enter the full path to the source file on the `video_path` variable.\n",
        " * The google drive path must start /content/drive/MyDrive/...\n",
        "* The `output_path` variable should be the full path to a folder where the files should be saved\n",
        " * This will also start /content/drive/MyDrive/...\n",
        " * If it doesn't exist, the script will create it\n",
        "* The `access_token` is a requirement of the usage conditions for the diarisation software.\n",
        " * **Important:** To load the pyannote speaker diarization pipeline,\n",
        "you must first accept the user conditions on both [hf.co/pyannote/speaker-diarization](https://hf.co/pyannote/speaker-diarization) and [hf.co/pyannote/segmentation](https://huggingface.co/pyannote/segmentation).\n",
        " * You'll need to create a huggingface account, then create an access token.\n",
        " * Then paste your access_token or login using `notebook_login` in the access_token variable below\n",
        " * Copy a token from your [Hugging Face tokens page](https://huggingface.co/settings/tokens) and paste it in the `access_token` box.\n",
        "\n",
        "* The `audio_title` variable is simply the name of the document. This will be shown at the top of the html output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 139,
      "metadata": {
        "id": "1zqnZsBacKph",
        "vscode": {
          "languageId": "python"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9563b2e-8c22-4889-a196-78e1baede516"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/Colab_Notebooks/Whisper/content/alles_neu/transcribe\n"
          ]
        }
      ],
      "source": [
        "Source = 'File (Google Drive)'\n",
        "#store_audio = True #@param {type:\"boolean\"}\n",
        "#@markdown #### **Google Drive video or audio path (mp4, wav, mp3)**\n",
        "video_path = \"/content/drive/MyDrive/Colab_Notebooks/Whisper/alles_neu.mp3\" #@param {type:\"string\"}\n",
        "output_path = \"/content/drive/MyDrive/Colab_Notebooks/Whisper/content/alles_neu\" #@param {type:\"string\"}\n",
        "output_path = str(Path(output_path))\n",
        "audio_title = \"alles_neu__Peter Fox\" #@param {type:\"string\"}\n",
        "access_token = \"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\" #@param {type:\"string\"}\n",
        "language_source = 'German' #@param ['any','Afrikaans','Arabic','Armenian','Azerbaijani','Belarusian','Bosnian','Bulgarian','Catalan','Chinese','Croatian','Czech','Danish','Dutch','English','Estonian','Finnish','French','Galician','German','Greek','Hebrew','Hindi','Hungarian','Icelandic','Indonesian','Italian','Japanese','Kannada','Kazakh','Korean','Latvian','Lithuanian','Macedonian','Malay','Marathi','Maori','Nepali','Norwegian','Persian','Polish','Portuguese','Romanian','Russian','Serbian','Slovak','Slovenian','Spanish','Swahili','Swedish','Tagalog','Tamil','Thai','Turkish','Ukrainian','Urdu','Vietnamese','Welsh']\n",
        "whisper_task = 'transcribe' #@param ['transcribe','translate']\n",
        "model_size = 'small' #@param ['tiny', 'base', 'small', 'medium', 'large']\n",
        "#append output path with task type\n",
        "output_path = os.path.join(output_path, whisper_task)\n",
        "\n",
        "print(output_path)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V2qTkKD_30FG"
      },
      "source": [
        "### Define Speakers\n",
        "\n",
        "Change or add to the speaker names and collors bellow as you wish `(speaker, textbox color, speaker color)`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 140,
      "metadata": {
        "id": "j7EP6fO73wTY",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [],
      "source": [
        "speakers = {\n",
        "    'SPEAKER_00':('Speaker 01', '#e1ffc7', 'darkgreen'),\n",
        "    'SPEAKER_01':('Speaker 02', 'white', 'darkorange'),\n",
        "    'SPEAKER_02':('Speaker 03', 'yellow','darkblue'),\n",
        "    'SPEAKER_03':('Speaker 04', 'green','black'),\n",
        "    'SPEAKER_04':('Speaker 05', 'orange','darkblue')\n",
        "    }\n",
        "def_boxclr = 'white'\n",
        "def_spkrclr = 'orange'"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Prepare data and folders"
      ],
      "metadata": {
        "id": "z_bYuLyB6ZP_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Make an output folder based on `output_path`"
      ],
      "metadata": {
        "id": "o98zPx4Pzzwv"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 141,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6vgK82ahXNje",
        "outputId": "888179c2-9c85-47a3-e7da-e1c2fe6a6344",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive/Colab_Notebooks/Whisper/content/alles_neu/transcribe\n"
          ]
        }
      ],
      "source": [
        "Path(output_path).mkdir(parents=True, exist_ok=True)\n",
        "%cd {output_path}\n",
        "video_title = \"\"\n",
        "video_id = \"\""
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Re-encode audio stream for input to pipeline"
      ],
      "metadata": {
        "id": "o84wUnGr5Nql"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 142,
      "metadata": {
        "id": "VjORT6CkVoTF",
        "vscode": {
          "languageId": "python"
        },
        "outputId": "0547a398-d386-4021-d19e-a65a3f0edaa5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ffmpeg version 4.4.2-0ubuntu0.22.04.1 Copyright (c) 2000-2021 the FFmpeg developers\n",
            "  built with gcc 11 (Ubuntu 11.2.0-19ubuntu1)\n",
            "  configuration: --prefix=/usr --extra-version=0ubuntu0.22.04.1 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared\n",
            "  libavutil      56. 70.100 / 56. 70.100\n",
            "  libavcodec     58.134.100 / 58.134.100\n",
            "  libavformat    58. 76.100 / 58. 76.100\n",
            "  libavdevice    58. 13.100 / 58. 13.100\n",
            "  libavfilter     7.110.100 /  7.110.100\n",
            "  libswscale      5.  9.100 /  5.  9.100\n",
            "  libswresample   3.  9.100 /  3.  9.100\n",
            "  libpostproc    55.  9.100 / 55.  9.100\n",
            "Input #0, mp3, from '/content/drive/MyDrive/Colab_Notebooks/Whisper/alles_neu.mp3':\n",
            "  Metadata:\n",
            "    major_brand     : dash\n",
            "    minor_version   : 0\n",
            "    compatible_brands: iso6mp41\n",
            "    encoder         : Lavf56.40.101\n",
            "    title           : 1.Alles Neu (Peter Fox)\n",
            "    comment         : www.mediahuman.com\n",
            "    artist          : Peter Fox\n",
            "    album_artist    : Peter Fox\n",
            "    album           : Alles Neu\n",
            "  Duration: 00:04:18.93, start: 0.025056, bitrate: 193 kb/s\n",
            "  Stream #0:0: Audio: mp3, 44100 Hz, stereo, fltp, 192 kb/s\n",
            "    Metadata:\n",
            "      encoder         : Lavc56.60\n",
            "  Stream #0:1: Video: mjpeg (Baseline), yuvj420p(pc, bt470bg/unknown/unknown), 1280x720 [SAR 1:1 DAR 16:9], 90k tbr, 90k tbn, 90k tbc (attached pic)\n",
            "    Metadata:\n",
            "      comment         : Cover (front)\n",
            "Stream mapping:\n",
            "  Stream #0:0 -> #0:0 (mp3 (mp3float) -> pcm_s16le (native))\n",
            "Press [q] to stop, [?] for help\n",
            "Output #0, wav, to 'input.wav':\n",
            "  Metadata:\n",
            "    major_brand     : dash\n",
            "    minor_version   : 0\n",
            "    compatible_brands: iso6mp41\n",
            "    IPRD            : Alles Neu\n",
            "    INAM            : 1.Alles Neu (Peter Fox)\n",
            "    ICMT            : www.mediahuman.com\n",
            "    IART            : Peter Fox\n",
            "    album_artist    : Peter Fox\n",
            "    ISFT            : Lavf58.76.100\n",
            "  Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 16000 Hz, mono, s16, 256 kb/s\n",
            "    Metadata:\n",
            "      encoder         : Lavc58.134.100 pcm_s16le\n",
            "size=    8091kB time=00:04:18.89 bitrate= 256.0kbits/s speed= 416x    \n",
            "video:0kB audio:8091kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.002100%\n"
          ]
        }
      ],
      "source": [
        "!ffmpeg -i {repr(video_path)} -vn -acodec pcm_s16le -ar 16000 -ac 1 -y input.wav"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1u1vbqd_VzNp"
      },
      "source": [
        "### Prepending a spacer"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q7qMLTISFE6M"
      },
      "source": [
        "`pyannote.audio` seems to miss the first 0.5 seconds of the audio, and, therefore, we prepend a spcacer."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 143,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MaRDsBV1CWi8",
        "outputId": "b7c20f5c-f149-4dc2-96ea-fcad9d07b2a3",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<_io.BufferedRandom name='input_prep.wav'>"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ],
      "source": [
        "\n",
        "spacermilli = 2000\n",
        "spacer = AudioSegment.silent(duration=spacermilli)\n",
        "\n",
        "\n",
        "audio = AudioSegment.from_wav(\"input.wav\")\n",
        "\n",
        "audio = spacer.append(audio, crossfade=0)\n",
        "\n",
        "audio.export('input_prep.wav', format='wav')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mb5eEOKUooju"
      },
      "source": [
        "## Diarization using Pyannote"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nxNf1l8Ye_U9"
      },
      "source": [
        "[`pyannote.audio`](https://github.com/pyannote/pyannote-audio) is an open-source toolkit written in Python for **speaker diarization**.\n",
        "\n",
        "Based on [`PyTorch`](https://pytorch.org) machine learning framework, it provides a set of trainable end-to-end neural building blocks that can be combined and jointly optimized to build speaker diarization pipelines.\n",
        "\n",
        "`pyannote.audio` also comes with pretrained [models](https://huggingface.co/models?other=pyannote-audio-model) and [pipelines](https://huggingface.co/models?other=pyannote-audio-pipeline) covering a wide range of domains for voice activity detection, speaker segmentation, overlapped speech detection, speaker embedding reaching state-of-the-art performance for most of them."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S8Ak_OQwqd-3"
      },
      "source": [
        "### Define Pyannote pipeline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 144,
      "metadata": {
        "id": "jKG14DGYbwku",
        "vscode": {
          "languageId": "python"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c87bf6d8-a27e-4bef-8144-c4b6eec91bdb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:pytorch_lightning.utilities.migration.utils:Lightning automatically upgraded your loaded checkpoint from v1.5.4 to v2.0.8. To apply the upgrade to your files permanently, run `python -m pytorch_lightning.utilities.upgrade_checkpoint --file ../../../../../../../../root/.cache/torch/pyannote/models--pyannote--segmentation/snapshots/c4c8ceafcbb3a7a280c2d357aee9fbc9b0be7f9b/pytorch_model.bin`\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model was trained with pyannote.audio 0.0.1, yours is 2.1.1. Bad things might happen unless you revert pyannote.audio to 0.x.\n",
            "Model was trained with torch 1.10.0+cu102, yours is 2.0.1+cu117. Bad things might happen unless you revert torch to 1.x.\n"
          ]
        }
      ],
      "source": [
        "pipeline = Pipeline.from_pretrained('pyannote/speaker-diarization', use_auth_token= (access_token) or True )"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Define whether GPU or CPU is going to be used.\n",
        "Almost not worth bothering with CPUs."
      ],
      "metadata": {
        "id": "aOX2VlP16BPx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "pipeline.to(device)"
      ],
      "metadata": {
        "id": "OjsUVdR2jH0n",
        "outputId": "63412eb1-05d1-4f7a-8f2b-a3f68a955e86",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pyannote.audio.pipelines.speaker_diarization.SpeakerDiarization at 0x7edf0efda6b0>"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ImKMcCr5W5Nw"
      },
      "source": [
        "### Run pyannote.audio to generate the diarizations."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 146,
      "metadata": {
        "id": "yA4xiEefft9Z",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [],
      "source": [
        "DEMO_FILE = {'uri': 'blabla', 'audio': 'input_prep.wav'}\n",
        "dz = pipeline(DEMO_FILE)\n",
        "\n",
        "with open(\"diarization.txt\", \"w\") as text_file:\n",
        "    text_file.write(str(dz))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 147,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GHIY2MB3Vz3e",
        "outputId": "92479626-43f3-4e9b-b8a3-ed75b1009498",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(<Segment(12.8242, 13.5068)>, 'A', 'SPEAKER_00')\n",
            "(<Segment(14.9915, 15.0085)>, 'B', 'SPEAKER_00')\n",
            "(<Segment(16.4932, 43.2509)>, 'C', 'SPEAKER_00')\n",
            "(<Segment(44.087, 64.9915)>, 'D', 'SPEAKER_00')\n",
            "(<Segment(64.4966, 65.1109)>, 'T', 'SPEAKER_03')\n",
            "(<Segment(66.5444, 69.6331)>, 'U', 'SPEAKER_03')\n",
            "(<Segment(73.1314, 74.8208)>, 'P', 'SPEAKER_02')\n",
            "(<Segment(75.7253, 77.0051)>, 'Q', 'SPEAKER_02')\n",
            "(<Segment(77.0051, 80.9983)>, 'H', 'SPEAKER_01')\n",
            "(<Segment(82.9949, 84.8208)>, 'I', 'SPEAKER_01')\n"
          ]
        }
      ],
      "source": [
        "print(*list(dz.itertracks(yield_label = True))[:10], sep=\"\\n\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wp36eMedRkR0"
      },
      "source": [
        "### Prepare trimmed audio files according to the diarization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 148,
      "metadata": {
        "id": "KPGOaVpOH7pZ",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [],
      "source": [
        "def millisec(timeStr):\n",
        "  spl = timeStr.split(\":\")\n",
        "  s = (int)((int(spl[0]) * 60 * 60 + int(spl[1]) * 60 + float(spl[2]) )* 1000)\n",
        "  return s"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Co3BIIH6aW4"
      },
      "source": [
        "### Group the diarization segments according to the speaker."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 149,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "umQdzNFzcP2f",
        "outputId": "38740560-5b7b-415f-b1f2-5088fb551802",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['[ 00:00:12.824 -->  00:00:13.506] A SPEAKER_00', '[ 00:00:14.991 -->  00:00:15.008] B SPEAKER_00', '[ 00:00:16.493 -->  00:00:43.250] C SPEAKER_00', '[ 00:00:44.087 -->  00:01:04.991] D SPEAKER_00']\n",
            "['[ 00:01:04.496 -->  00:01:05.110] T SPEAKER_03', '[ 00:01:06.544 -->  00:01:09.633] U SPEAKER_03']\n",
            "['[ 00:01:13.131 -->  00:01:14.820] P SPEAKER_02', '[ 00:01:15.725 -->  00:01:17.005] Q SPEAKER_02']\n",
            "['[ 00:01:17.005 -->  00:01:20.998] H SPEAKER_01', '[ 00:01:22.994 -->  00:01:24.820] I SPEAKER_01', '[ 00:01:25.503 -->  00:01:30.605] J SPEAKER_01', '[ 00:01:31.424 -->  00:01:31.578] K SPEAKER_01']\n",
            "['[ 00:01:35.196 -->  00:01:38.404] V SPEAKER_03']\n",
            "['[ 00:01:46.424 -->  00:02:15.998] E SPEAKER_00', '[ 00:02:17.005 -->  00:02:22.500] F SPEAKER_00', '[ 00:02:29.001 -->  00:02:37.994] G SPEAKER_00']\n",
            "['[ 00:02:37.994 -->  00:02:38.319] W SPEAKER_03', '[ 00:02:39.291 -->  00:02:42.602] X SPEAKER_03']\n",
            "['[ 00:02:46.288 -->  00:02:47.994] R SPEAKER_02', '[ 00:02:48.865 -->  00:02:49.650] S SPEAKER_02']\n",
            "['[ 00:02:49.496 -->  00:02:51.493] Y SPEAKER_03']\n",
            "['[ 00:02:51.493 -->  00:02:57.773] L SPEAKER_01', '[ 00:02:58.967 -->  00:03:03.592] M SPEAKER_01', '[ 00:03:06.697 -->  00:03:12.175] N SPEAKER_01', '[ 00:03:13.131 -->  00:03:17.994] O SPEAKER_01']\n",
            "['[ 00:03:22.738 -->  00:03:27.005] Z SPEAKER_03']\n"
          ]
        }
      ],
      "source": [
        "dzs = open('diarization.txt').read().splitlines()\n",
        "\n",
        "groups = []\n",
        "g = []\n",
        "lastend = 0\n",
        "\n",
        "for d in dzs:\n",
        "  if g and (g[0].split()[-1] != d.split()[-1]):      #same speaker\n",
        "    groups.append(g)\n",
        "    g = []\n",
        "\n",
        "  g.append(d)\n",
        "\n",
        "  end = re.findall('[0-9]+:[0-9]+:[0-9]+\\.[0-9]+', string=d)[1]\n",
        "  end = millisec(end)\n",
        "  if (lastend > end):       #segment engulfed by a previous segment\n",
        "    groups.append(g)\n",
        "    g = []\n",
        "  else:\n",
        "    lastend = end\n",
        "if g:\n",
        "  groups.append(g)\n",
        "print(*groups, sep='\\n')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JOuf8CuRQeZo"
      },
      "source": [
        "### Save the audio part corresponding to each diarization group."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 150,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dRQPUW4Mzvfn",
        "outputId": "74328dc7-4b58-4fc0-f0e6-2228d09b4283",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "group 0: 12824--64991\n",
            "group 1: 64495--69633\n",
            "group 2: 73131--77005\n",
            "group 3: 77005--91578\n",
            "group 4: 95196--98404\n",
            "group 5: 106424--157994\n",
            "group 6: 157994--162602\n",
            "group 7: 166288--169650\n",
            "group 8: 169496--171493\n",
            "group 9: 171493--197994\n",
            "group 10: 202738--207005\n"
          ]
        }
      ],
      "source": [
        "audio = AudioSegment.from_wav(\"input_prep.wav\")\n",
        "gidx = -1\n",
        "for g in groups:\n",
        "  start = re.findall('[0-9]+:[0-9]+:[0-9]+\\.[0-9]+', string=g[0])[0]\n",
        "  end = re.findall('[0-9]+:[0-9]+:[0-9]+\\.[0-9]+', string=g[-1])[1]\n",
        "  start = millisec(start) #- spacermilli\n",
        "  end = millisec(end)  #- spacermilli\n",
        "  gidx += 1\n",
        "  #audio[start:end].export(str(gidx) + '.wav', format='wav')\n",
        "  #print(f\"group {gidx}: {start}--{end}\")\n",
        "  audio[start:end].export(str(gidx) + '.mp3', format='mp3')\n",
        "  print(f\"group {gidx}: {start}--{end}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rv2GYZCsLKBJ"
      },
      "source": [
        "### Free up some memory by removing some variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 151,
      "metadata": {
        "id": "cONumKWUjfus",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [],
      "source": [
        "del   DEMO_FILE, pipeline, spacer,  audio, dz"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AmxtB0k4n8lY"
      },
      "source": [
        "# Transcription & Translation using Whisper AI"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Load model"
      ],
      "metadata": {
        "id": "7TGTZHeg7f73"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 152,
      "metadata": {
        "id": "AHKf0tFVmGyq",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [],
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = whisper.load_model(model_size, device = device)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pBO8IpdiRQ0X"
      },
      "source": [
        "### Run whisper on all audio files. Whisper generates the transcription and writes it to a file.\n",
        "This can take a long time, depending on your input file"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 153,
      "metadata": {
        "id": "odstu62EnMLL",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [],
      "source": [
        "\n",
        "for i in range(len(groups)):\n",
        "    audiof = str(i) + '.mp3'\n",
        "\n",
        "    if whisper_task == 'transcribe':\n",
        "        # Perform transcription\n",
        "        result = model.transcribe(audio=audiof, language=language_source, word_timestamps=True)\n",
        "    elif whisper_task == 'translate':\n",
        "        # Perform translation\n",
        "        result = model.transcribe(audio=audiof, language=language_source, word_timestamps=True, task = \"translate\")\n",
        "    else:\n",
        "        raise ValueError(\"Invalid whisper_task value. Use 'transcribe' or 'translate'.\")\n",
        "\n",
        "    # Save the result to a JSON file\n",
        "    with open(str(i) + '.json', \"w\") as outfile:\n",
        "        json.dump(result, outfile, indent=4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u_UyWQMXpB3N"
      },
      "source": [
        "### Generate the HTML and/or txt file from the Transcriptions and the Diarization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KndDYy_xMpMq"
      },
      "source": [
        "In the generated HTML,  the transcriptions for each diarization group are written in a box, with the speaker name on the top. By clicking a transcription, the embedded video jumps to the right time ."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 154,
      "metadata": {
        "id": "vKdx9Hwg630K",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [],
      "source": [
        "preS = '\\n<!DOCTYPE html>\\n<html lang=\"en\">\\n\\n<head>\\n\\t<meta charset=\"UTF-8\">\\n\\t<meta name=\"viewport\" content=\"whtmlidth=device-width, initial-scale=1.0\">\\n\\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\\n\\t<title>' + \\\n",
        "    audio_title+ \\\n",
        "    '</title>\\n\\t<style>\\n\\t\\tbody {\\n\\t\\t\\tfont-family: sans-serif;\\n\\t\\t\\tfont-size: 14px;\\n\\t\\t\\tcolor: #111;\\n\\t\\t\\tpadding: 0 0 1em 0;\\n\\t\\t\\tbackground-color: #efe7dd;\\n\\t\\t}\\n\\n\\t\\ttable {\\n\\t\\t\\tborder-spacing: 10px;\\n\\t\\t}\\n\\n\\t\\tth {\\n\\t\\t\\ttext-align: left;\\n\\t\\t}\\n\\n\\t\\t.lt {\\n\\t\\t\\tcolor: inherit;\\n\\t\\t\\ttext-decoration: inherit;\\n\\t\\t}\\n\\n\\t\\t.l {\\n\\t\\t\\tcolor: #050;\\n\\t\\t}\\n\\n\\t\\t.s {\\n\\t\\t\\tdisplay: inline-block;\\n\\t\\t}\\n\\n\\t\\t.c {\\n\\t\\t\\tdisplay: inline-block;\\n\\t\\t}\\n\\n\\t\\t.e {\\n\\t\\t\\t/*background-color: white; Changing background color */\\n\\t\\t\\tborder-radius: 10px;\\n\\t\\t\\t/* Making border radius */\\n\\t\\t\\twidth: 50%;\\n\\t\\t\\t/* Making auto-sizable width */\\n\\t\\t\\tpadding: 0 0 0 0;\\n\\t\\t\\t/* Making space around letters */\\n\\t\\t\\tfont-size: 14px;\\n\\t\\t\\t/* Changing font size */\\n\\t\\t\\tmargin-bottom: 0;\\n\\t\\t}\\n\\n\\t\\t.t {\\n\\t\\t\\tdisplay: inline-block;\\n\\t\\t}\\n\\n\\t\\t#player-div {\\n\\t\\t\\tposition: sticky;\\n\\t\\t\\ttop: 20px;\\n\\t\\t\\tfloat: right;\\n\\t\\t\\twidth: 40%\\n\\t\\t}\\n\\n\\t\\t#player {\\n\\t\\t\\taspect-ratio: 16 / 9;\\n\\t\\t\\twidth: 100%;\\n\\t\\t\\theight: auto;\\n\\t\\t}\\n\\n\\t\\ta {\\n\\t\\t\\tdisplay: inline;\\n\\t\\t}\\n\\t</style>';\n",
        "preS += '\\n\\t<script>\\n\\twindow.onload = function () {\\n\\t\\t\\tvar player = document.getElementById(\"audio_player\");\\n\\t\\t\\tvar player;\\n\\t\\t\\tvar lastword = null;\\n\\n\\t\\t\\t// So we can compare against new updates.\\n\\t\\t\\tvar lastTimeUpdate = \"-1\";\\n\\n\\t\\t\\tsetInterval(function () {\\n\\t\\t\\t\\t// currentTime is checked very frequently (1 millisecond),\\n\\t\\t\\t\\t// but we only care about whole second changes.\\n\\t\\t\\t\\tvar ts = (player.currentTime).toFixed(1).toString();\\n\\t\\t\\t\\tts = (Math.round((player.currentTime) * 5) / 5).toFixed(1);\\n\\t\\t\\t\\tts = ts.toString();\\n\\t\\t\\t\\tconsole.log(ts);\\n\\t\\t\\t\\tif (ts !== lastTimeUpdate) {\\n\\t\\t\\t\\t\\tlastTimeUpdate = ts;\\n\\n\\t\\t\\t\\t\\t// Its now up to you to format the time.\\n\\t\\t\\t\\t\\tword = document.getElementById(ts)\\n\\t\\t\\t\\t\\tif (word) {\\n\\t\\t\\t\\t\\t\\tif (lastword) {\\n\\t\\t\\t\\t\\t\\t\\tlastword.style.fontWeight = \"normal\";\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tlastword = word;\\n\\t\\t\\t\\t\\t\\t//word.style.textDecoration = \"underline\";\\n\\t\\t\\t\\t\\t\\tword.style.fontWeight = \"bold\";\\n\\n\\t\\t\\t\\t\\t\\tlet toggle = document.getElementById(\"autoscroll\");\\n\\t\\t\\t\\t\\t\\tif (toggle.checked) {\\n\\t\\t\\t\\t\\t\\t\\tlet position = word.offsetTop - 20;\\n\\t\\t\\t\\t\\t\\t\\twindow.scrollTo({\\n\\t\\t\\t\\t\\t\\t\\t\\ttop: position,\\n\\t\\t\\t\\t\\t\\t\\t\\tbehavior: \"smooth\"\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, 0.1);\\n\\t\\t}\\n\\n\\t\\tfunction jumptoTime(timepoint, id) {\\n\\t\\t\\tvar player = document.getElementById(\"audio_player\");\\n\\t\\t\\thistory.pushState(null, null, \"#\" + id);\\n\\t\\t\\tplayer.pause();\\n\\t\\t\\tplayer.currentTime = timepoint;\\n\\t\\t\\tplayer.play();\\n\\t\\t}\\n\\t\\t</script>\\n\\t</head>';\n",
        "preS += '\\n\\n<body>\\n\\t<h2>' + audio_title + '</h2>\\n\\t<i>Click on a part of the transcription, to jump to its portion of audio, and get an anchor to it in the address\\n\\t\\tbar<br><br></i>\\n\\t<div id=\"player-div\">\\n\\t\\t<div id=\"player\">\\n\\t\\t\\t<audio controls=\"controls\" id=\"audio_player\">\\n\\t\\t\\t\\t<source src=\"input.wav\" />\\n\\t\\t\\t</audio>\\n\\t\\t</div>\\n\\t\\t<div><label for=\"autoscroll\">auto-scroll: </label>\\n\\t\\t\\t<input type=\"checkbox\" id=\"autoscroll\" checked>\\n\\t\\t</div>\\n\\t</div>\\n';\n",
        "\n",
        "postS = '\\t</body>\\n</html>'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 155,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vqO6Nd6YfZYa",
        "outputId": "d2a4c772-ea0a-4f6e-e550-d4ea4421ef4a",
        "vscode": {
          "languageId": "python"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "captions saved to capspeaker.txt:\n",
            "[00:00:010.82 --> 00:00:014.32] [Speaker 01]  Ich verbrenne mein Studio, Schnupfe, die Asche wie Koks.\n",
            "[00:00:014.88 --> 00:00:017.80] [Speaker 01]  Ich erschlag meinen Goldfisch, vergrab ihn im Hof.\n",
            "[00:00:018.02 --> 00:00:021.58] [Speaker 01]  Ich jag meine Bude hoch, alles was ich hab, lass dich los.\n",
            "[00:00:021.90 --> 00:00:024.82] [Speaker 01]  Mein altes Leben schmeckt wie ein labriger Toast.\n",
            "[00:00:025.36 --> 00:00:026.76] [Speaker 01]  Brach mir in Pracht, shake.\n",
            "[00:00:026.98 --> 00:00:030.12] [Speaker 01]  Peter kocht jetzt fein zu Fleisch, spinn das Update.\n",
            "[00:00:030.54 --> 00:00:032.44] [Speaker 01]  Peter Vox, Deins Punkt 1.\n",
            "[00:00:032.82 --> 00:00:035.90] [Speaker 01]  Ich will abchaken, feiern doch mein Teich ist zu klein.\n",
            "[00:00:036.00 --> 00:00:039.56] [Speaker 01]  Mit Wechselneuerei, ein Pfeiser wie bei im beiesem Hei.\n",
            "[00:00:041.42 --> 00:00:043.70] [Speaker 01]  Gewachsgetopuliert, nahe mir neue Zähne.\n",
            "[00:00:043.84 --> 00:00:047.30] [Speaker 01]  Ich bin neu fokrisiert und habe teuer Pläne.\n",
            "[00:00:047.48 --> 00:00:051.02] [Speaker 01]  Ich kaufe mir Baumaschinen, Wagen, Weizen und Kräne.\n",
            "[00:00:051.04 --> 00:00:054.56] [Speaker 01]  Stürze mich auf Berlin und drück auf die Sirene.\n",
            "[00:00:054.70 --> 00:00:058.28] [Speaker 01]  Ich baue schöne Voxentür mit besser massieren eure Seele.\n",
            "[00:00:058.56 --> 00:01:001.92] [Speaker 01]  Ich bin die Abrissmörder für die deutsche Szene.\n",
            "[00:01:011.13 --> 00:01:011.65] [Speaker 03]  sixteen\n",
            "[00:01:011.65 --> 00:01:012.13] [Speaker 03]  15\n",
            "[00:01:012.13 --> 00:01:012.13] [Speaker 03] \n",
            "[00:01:012.13 --> 00:01:012.13] [Speaker 03] \n",
            "[00:01:012.13 --> 00:01:012.81] [Speaker 03]  den\n",
            "[00:01:014.17 --> 00:01:014.71] [Speaker 03]  Collaboradel\n",
            "[00:01:015.98 --> 00:01:022.00] [Speaker 02]  Die Welt mit Staubetecken, ich will sehen wo es hingeht.\n",
            "[00:01:023.41 --> 00:01:029.00] [Speaker 02]  Steigt auf den Berg ausreckt, weil oben frischer Wind weht.\n",
            "[00:01:033.20 --> 00:01:035.94] [Speaker 04]  Alles geht so schön neu\n",
            "[00:01:044.42 --> 00:01:048.42] [Speaker 01]  Ich hab meine alten Sachen satt, und lass sie in einem Sack verrotten.\n",
            "[00:01:048.56 --> 00:01:051.98] [Speaker 01]  Motze die Klamotten ein, und dann geh ich nackt shoppen.\n",
            "[00:01:052.08 --> 00:01:055.56] [Speaker 01]  Ich bin komplett renoviert, bräute haben, was zu glotten.\n",
            "[00:01:055.76 --> 00:01:059.18] [Speaker 01]  Kerngesund durchzunieren, Feldmeister, Schach und Posten.\n",
            "[00:01:059.42 --> 00:02:002.56] [Speaker 01]  Nur noch konkret reden, küppen wir ein Jahr oder nein.\n",
            "[00:02:002.80 --> 00:02:006.24] [Speaker 01]  Schuss mit Larry Fari, ich lass all die alten Sack zu sein.\n",
            "[00:02:006.64 --> 00:02:009.84] [Speaker 01]  Sollte ich hier wieder kippen, hau ich mir ne Axt in zwei.\n",
            "[00:02:010.04 --> 00:02:013.38] [Speaker 01]  Ich will nie mehr lügen, ich will jeden Satt auch so meinen.\n",
            "[00:02:013.38 --> 00:02:017.06] [Speaker 01]  Mir flasst der Krop, alles muss sich verändern.\n",
            "[00:02:017.34 --> 00:02:022.26] [Speaker 01]  Ich such den Krop, treffe die mächtigen Männer, springen das Land zum Glück.\n",
            "[00:02:023.10 --> 00:02:025.90] [Speaker 01]  Kaufverbanden und Sender, alles spielt verrückt.\n",
            "[00:02:026.12 --> 00:02:027.82] [Speaker 01]  Zittern ist Schaf und Lämmer.\n",
            "[00:02:027.94 --> 00:02:031.18] [Speaker 01]  Ich seh' besser aus als Bono und bin ein Mann des Volkes.\n",
            "[00:02:031.34 --> 00:02:035.18] [Speaker 01]  Vielleicht die Welt zu retten, auch wenn das vielleicht zu viel du wolltest.\n",
            "[00:02:035.42 --> 00:02:035.74] [Speaker 01]  Hey!\n",
            "[00:02:044.29 --> 00:02:044.81] [Speaker 03]  describes\n",
            "[00:02:049.49 --> 00:02:055.57] [Speaker 02]  Hier ist die Luft, da braucht das Atmenfeld mir Steher\n",
            "[00:02:056.85 --> 00:03:002.81] [Speaker 02]  Beibei ich muss hier raus, die Wände kommen näher\n",
            "[00:03:003.49 --> 00:03:009.49] [Speaker 02]  Die Welt mit Schnaufe deckt, doch ich will sehen, wo's hingeht\n",
            "[00:03:010.91 --> 00:03:015.97] [Speaker 02]  Steigt auf den Berg, ausreckt, weil oben frisch ab ist\n",
            "[00:03:020.74 --> 00:03:021.44] [Speaker 04]  Alles klar\n",
            "[00:03:022.74 --> 00:03:023.68] [Speaker 04]  So schnell ist es\n",
            "\n",
            "\n",
            "captions saved to capspeaker.html:\n",
            "\n",
            "<!DOCTYPE html>\n",
            "<html lang=\"en\">\n",
            "\n",
            "<head>\n",
            "\t<meta charset=\"UTF-8\">\n",
            "\t<meta name=\"viewport\" content=\"whtmlidth=device-width, initial-scale=1.0\">\n",
            "\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n",
            "\t<title>alles_neu__Peter Fox</title>\n",
            "\t<style>\n",
            "\t\tbody {\n",
            "\t\t\tfont-family: sans-serif;\n",
            "\t\t\tfont-size: 14px;\n",
            "\t\t\tcolor: #111;\n",
            "\t\t\tpadding: 0 0 1em 0;\n",
            "\t\t\tbackground-color: #efe7dd;\n",
            "\t\t}\n",
            "\n",
            "\t\ttable {\n",
            "\t\t\tborder-spacing: 10px;\n",
            "\t\t}\n",
            "\n",
            "\t\tth {\n",
            "\t\t\ttext-align: left;\n",
            "\t\t}\n",
            "\n",
            "\t\t.lt {\n",
            "\t\t\tcolor: inherit;\n",
            "\t\t\ttext-decoration: inherit;\n",
            "\t\t}\n",
            "\n",
            "\t\t.l {\n",
            "\t\t\tcolor: #050;\n",
            "\t\t}\n",
            "\n",
            "\t\t.s {\n",
            "\t\t\tdisplay: inline-block;\n",
            "\t\t}\n",
            "\n",
            "\t\t.c {\n",
            "\t\t\tdisplay: inline-block;\n",
            "\t\t}\n",
            "\n",
            "\t\t.e {\n",
            "\t\t\t/*background-color: white; Changing background color */\n",
            "\t\t\tborder-radius: 10px;\n",
            "\t\t\t/* Making border radius */\n",
            "\t\t\twidth: 50%;\n",
            "\t\t\t/* Making auto-sizable width */\n",
            "\t\t\tpadding: 0 0 0 0;\n",
            "\t\t\t/* Making space around letters */\n",
            "\t\t\tfont-size: 14px;\n",
            "\t\t\t/* Changing font size */\n",
            "\t\t\tmargin-bottom: 0;\n",
            "\t\t}\n",
            "\n",
            "\t\t.t {\n",
            "\t\t\tdisplay: inline-block;\n",
            "\t\t}\n",
            "\n",
            "\t\t#player-div {\n",
            "\t\t\tposition: sticky;\n",
            "\t\t\ttop: 20px;\n",
            "\t\t\tfloat: right;\n",
            "\t\t\twidth: 40%\n",
            "\t\t}\n",
            "\n",
            "\t\t#player {\n",
            "\t\t\taspect-ratio: 16 / 9;\n",
            "\t\t\twidth: 100%;\n",
            "\t\t\theight: auto;\n",
            "\t\t}\n",
            "\n",
            "\t\ta {\n",
            "\t\t\tdisplay: inline;\n",
            "\t\t}\n",
            "\t</style>\n",
            "\t<script>\n",
            "\twindow.onload = function () {\n",
            "\t\t\tvar player = document.getElementById(\"audio_player\");\n",
            "\t\t\tvar player;\n",
            "\t\t\tvar lastword = null;\n",
            "\n",
            "\t\t\t// So we can compare against new updates.\n",
            "\t\t\tvar lastTimeUpdate = \"-1\";\n",
            "\n",
            "\t\t\tsetInterval(function () {\n",
            "\t\t\t\t// currentTime is checked very frequently (1 millisecond),\n",
            "\t\t\t\t// but we only care about whole second changes.\n",
            "\t\t\t\tvar ts = (player.currentTime).toFixed(1).toString();\n",
            "\t\t\t\tts = (Math.round((player.currentTime) * 5) / 5).toFixed(1);\n",
            "\t\t\t\tts = ts.toString();\n",
            "\t\t\t\tconsole.log(ts);\n",
            "\t\t\t\tif (ts !== lastTimeUpdate) {\n",
            "\t\t\t\t\tlastTimeUpdate = ts;\n",
            "\n",
            "\t\t\t\t\t// Its now up to you to format the time.\n",
            "\t\t\t\t\tword = document.getElementById(ts)\n",
            "\t\t\t\t\tif (word) {\n",
            "\t\t\t\t\t\tif (lastword) {\n",
            "\t\t\t\t\t\t\tlastword.style.fontWeight = \"normal\";\n",
            "\t\t\t\t\t\t}\n",
            "\t\t\t\t\t\tlastword = word;\n",
            "\t\t\t\t\t\t//word.style.textDecoration = \"underline\";\n",
            "\t\t\t\t\t\tword.style.fontWeight = \"bold\";\n",
            "\n",
            "\t\t\t\t\t\tlet toggle = document.getElementById(\"autoscroll\");\n",
            "\t\t\t\t\t\tif (toggle.checked) {\n",
            "\t\t\t\t\t\t\tlet position = word.offsetTop - 20;\n",
            "\t\t\t\t\t\t\twindow.scrollTo({\n",
            "\t\t\t\t\t\t\t\ttop: position,\n",
            "\t\t\t\t\t\t\t\tbehavior: \"smooth\"\n",
            "\t\t\t\t\t\t\t});\n",
            "\t\t\t\t\t\t}\n",
            "\t\t\t\t\t}\n",
            "\t\t\t\t}\n",
            "\t\t\t}, 0.1);\n",
            "\t\t}\n",
            "\n",
            "\t\tfunction jumptoTime(timepoint, id) {\n",
            "\t\t\tvar player = document.getElementById(\"audio_player\");\n",
            "\t\t\thistory.pushState(null, null, \"#\" + id);\n",
            "\t\t\tplayer.pause();\n",
            "\t\t\tplayer.currentTime = timepoint;\n",
            "\t\t\tplayer.play();\n",
            "\t\t}\n",
            "\t\t</script>\n",
            "\t</head>\n",
            "\n",
            "<body>\n",
            "\t<h2>alles_neu__Peter Fox</h2>\n",
            "\t<i>Click on a part of the transcription, to jump to its portion of audio, and get an anchor to it in the address\n",
            "\t\tbar<br><br></i>\n",
            "\t<div id=\"player-div\">\n",
            "\t\t<div id=\"player\">\n",
            "\t\t\t<audio controls=\"controls\" id=\"audio_player\">\n",
            "\t\t\t\t<source src=\"input.wav\" />\n",
            "\t\t\t</audio>\n",
            "\t\t</div>\n",
            "\t\t<div><label for=\"autoscroll\">auto-scroll: </label>\n",
            "\t\t\t<input type=\"checkbox\" id=\"autoscroll\" checked>\n",
            "\t\t</div>\n",
            "\t</div>\n",
            "<div class=\"e\" style=\"background-color: #e1ffc7\">\n",
            "<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\n",
            "<span style=\"color:darkgreen;font-weight: bold;\">Speaker 01</span><br>\n",
            "\t\t\t\t<a href=\"#00:00:010.82\" id=\"10.8\" class=\"lt\" onclick=\"jumptoTime(10, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:011.04\" id=\"11.0\" class=\"lt\" onclick=\"jumptoTime(11, this.id)\"> verbrenne</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:011.54\" id=\"11.6\" class=\"lt\" onclick=\"jumptoTime(11, this.id)\"> mein</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:011.72\" id=\"11.8\" class=\"lt\" onclick=\"jumptoTime(11, this.id)\"> Studio,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:012.56\" id=\"12.6\" class=\"lt\" onclick=\"jumptoTime(12, this.id)\"> Schnupfe,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:013.14\" id=\"13.2\" class=\"lt\" onclick=\"jumptoTime(13, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:013.24\" id=\"13.2\" class=\"lt\" onclick=\"jumptoTime(13, this.id)\"> Asche</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:013.62\" id=\"13.6\" class=\"lt\" onclick=\"jumptoTime(13, this.id)\"> wie</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:013.86\" id=\"13.8\" class=\"lt\" onclick=\"jumptoTime(13, this.id)\"> Koks.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:014.88\" id=\"14.8\" class=\"lt\" onclick=\"jumptoTime(14, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:015.08\" id=\"15.0\" class=\"lt\" onclick=\"jumptoTime(15, this.id)\"> erschlag</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:015.58\" id=\"15.6\" class=\"lt\" onclick=\"jumptoTime(15, this.id)\"> meinen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:016.02\" id=\"16.0\" class=\"lt\" onclick=\"jumptoTime(16, this.id)\"> Goldfisch,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:016.88\" id=\"16.8\" class=\"lt\" onclick=\"jumptoTime(16, this.id)\"> vergrab</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:017.12\" id=\"17.2\" class=\"lt\" onclick=\"jumptoTime(17, this.id)\"> ihn</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:017.34\" id=\"17.4\" class=\"lt\" onclick=\"jumptoTime(17, this.id)\"> im</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:017.52\" id=\"17.6\" class=\"lt\" onclick=\"jumptoTime(17, this.id)\"> Hof.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:018.02\" id=\"18.0\" class=\"lt\" onclick=\"jumptoTime(18, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:018.20\" id=\"18.2\" class=\"lt\" onclick=\"jumptoTime(18, this.id)\"> jag</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:018.40\" id=\"18.4\" class=\"lt\" onclick=\"jumptoTime(18, this.id)\"> meine</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:018.76\" id=\"18.8\" class=\"lt\" onclick=\"jumptoTime(18, this.id)\"> Bude</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:019.22\" id=\"19.2\" class=\"lt\" onclick=\"jumptoTime(19, this.id)\"> hoch,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:019.88\" id=\"19.8\" class=\"lt\" onclick=\"jumptoTime(19, this.id)\"> alles</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:020.12\" id=\"20.2\" class=\"lt\" onclick=\"jumptoTime(20, this.id)\"> was</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:020.38\" id=\"20.4\" class=\"lt\" onclick=\"jumptoTime(20, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:020.64\" id=\"20.6\" class=\"lt\" onclick=\"jumptoTime(20, this.id)\"> hab,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:020.96\" id=\"21.0\" class=\"lt\" onclick=\"jumptoTime(20, this.id)\"> lass</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:021.08\" id=\"21.0\" class=\"lt\" onclick=\"jumptoTime(21, this.id)\"> dich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:021.32\" id=\"21.4\" class=\"lt\" onclick=\"jumptoTime(21, this.id)\"> los.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:021.90\" id=\"22.0\" class=\"lt\" onclick=\"jumptoTime(21, this.id)\"> Mein</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:022.42\" id=\"22.4\" class=\"lt\" onclick=\"jumptoTime(22, this.id)\"> altes</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:022.94\" id=\"23.0\" class=\"lt\" onclick=\"jumptoTime(22, this.id)\"> Leben</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:023.20\" id=\"23.2\" class=\"lt\" onclick=\"jumptoTime(23, this.id)\"> schmeckt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:023.70\" id=\"23.8\" class=\"lt\" onclick=\"jumptoTime(23, this.id)\"> wie</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:024.04\" id=\"24.0\" class=\"lt\" onclick=\"jumptoTime(24, this.id)\"> ein</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:024.18\" id=\"24.2\" class=\"lt\" onclick=\"jumptoTime(24, this.id)\"> labriger</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:024.74\" id=\"24.8\" class=\"lt\" onclick=\"jumptoTime(24, this.id)\"> Toast.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:025.36\" id=\"25.4\" class=\"lt\" onclick=\"jumptoTime(25, this.id)\"> Brach</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:025.60\" id=\"25.6\" class=\"lt\" onclick=\"jumptoTime(25, this.id)\"> mir</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:025.86\" id=\"25.8\" class=\"lt\" onclick=\"jumptoTime(25, this.id)\"> in</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:026.00\" id=\"26.0\" class=\"lt\" onclick=\"jumptoTime(26, this.id)\"> Pracht,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:026.62\" id=\"26.6\" class=\"lt\" onclick=\"jumptoTime(26, this.id)\"> shake.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:026.98\" id=\"27.0\" class=\"lt\" onclick=\"jumptoTime(26, this.id)\"> Peter</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:027.26\" id=\"27.2\" class=\"lt\" onclick=\"jumptoTime(27, this.id)\"> kocht</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:027.62\" id=\"27.6\" class=\"lt\" onclick=\"jumptoTime(27, this.id)\"> jetzt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:027.84\" id=\"27.8\" class=\"lt\" onclick=\"jumptoTime(27, this.id)\"> fein</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:028.20\" id=\"28.2\" class=\"lt\" onclick=\"jumptoTime(28, this.id)\"> zu</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:028.44\" id=\"28.4\" class=\"lt\" onclick=\"jumptoTime(28, this.id)\"> Fleisch,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:029.08\" id=\"29.0\" class=\"lt\" onclick=\"jumptoTime(29, this.id)\"> spinn</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:029.46\" id=\"29.4\" class=\"lt\" onclick=\"jumptoTime(29, this.id)\"> das</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:029.58\" id=\"29.6\" class=\"lt\" onclick=\"jumptoTime(29, this.id)\"> Update.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:030.54\" id=\"30.6\" class=\"lt\" onclick=\"jumptoTime(30, this.id)\"> Peter</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:030.84\" id=\"30.8\" class=\"lt\" onclick=\"jumptoTime(30, this.id)\"> Vox,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:031.46\" id=\"31.4\" class=\"lt\" onclick=\"jumptoTime(31, this.id)\"> Deins</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:031.72\" id=\"31.8\" class=\"lt\" onclick=\"jumptoTime(31, this.id)\"> Punkt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:032.00\" id=\"32.0\" class=\"lt\" onclick=\"jumptoTime(32, this.id)\"> 1.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:032.82\" id=\"32.8\" class=\"lt\" onclick=\"jumptoTime(32, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:032.96\" id=\"33.0\" class=\"lt\" onclick=\"jumptoTime(32, this.id)\"> will</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:033.16\" id=\"33.2\" class=\"lt\" onclick=\"jumptoTime(33, this.id)\"> abchaken,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:034.20\" id=\"34.2\" class=\"lt\" onclick=\"jumptoTime(34, this.id)\"> feiern</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:034.46\" id=\"34.4\" class=\"lt\" onclick=\"jumptoTime(34, this.id)\"> doch</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:034.72\" id=\"34.8\" class=\"lt\" onclick=\"jumptoTime(34, this.id)\"> mein</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:034.94\" id=\"35.0\" class=\"lt\" onclick=\"jumptoTime(34, this.id)\"> Teich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:035.30\" id=\"35.4\" class=\"lt\" onclick=\"jumptoTime(35, this.id)\"> ist</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:035.46\" id=\"35.4\" class=\"lt\" onclick=\"jumptoTime(35, this.id)\"> zu</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:035.64\" id=\"35.6\" class=\"lt\" onclick=\"jumptoTime(35, this.id)\"> klein.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:036.00\" id=\"36.0\" class=\"lt\" onclick=\"jumptoTime(36, this.id)\"> Mit</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:036.12\" id=\"36.2\" class=\"lt\" onclick=\"jumptoTime(36, this.id)\"> Wechselneuerei,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:037.40\" id=\"37.4\" class=\"lt\" onclick=\"jumptoTime(37, this.id)\"> ein</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:037.50\" id=\"37.6\" class=\"lt\" onclick=\"jumptoTime(37, this.id)\"> Pfeiser</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:037.88\" id=\"37.8\" class=\"lt\" onclick=\"jumptoTime(37, this.id)\"> wie</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:038.10\" id=\"38.2\" class=\"lt\" onclick=\"jumptoTime(38, this.id)\"> bei</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:038.38\" id=\"38.4\" class=\"lt\" onclick=\"jumptoTime(38, this.id)\"> im</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:038.58\" id=\"38.6\" class=\"lt\" onclick=\"jumptoTime(38, this.id)\"> beiesem</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:039.24\" id=\"39.2\" class=\"lt\" onclick=\"jumptoTime(39, this.id)\"> Hei.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:041.42\" id=\"41.4\" class=\"lt\" onclick=\"jumptoTime(41, this.id)\"> Gewachsgetopuliert,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:042.08\" id=\"42.0\" class=\"lt\" onclick=\"jumptoTime(42, this.id)\"> nahe</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:042.64\" id=\"42.6\" class=\"lt\" onclick=\"jumptoTime(42, this.id)\"> mir</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:042.82\" id=\"42.8\" class=\"lt\" onclick=\"jumptoTime(42, this.id)\"> neue</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:043.12\" id=\"43.2\" class=\"lt\" onclick=\"jumptoTime(43, this.id)\"> Zähne.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:043.84\" id=\"43.8\" class=\"lt\" onclick=\"jumptoTime(43, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:043.92\" id=\"44.0\" class=\"lt\" onclick=\"jumptoTime(43, this.id)\"> bin</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:044.12\" id=\"44.2\" class=\"lt\" onclick=\"jumptoTime(44, this.id)\"> neu</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:044.48\" id=\"44.4\" class=\"lt\" onclick=\"jumptoTime(44, this.id)\"> fokrisiert</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:045.56\" id=\"45.6\" class=\"lt\" onclick=\"jumptoTime(45, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:045.74\" id=\"45.8\" class=\"lt\" onclick=\"jumptoTime(45, this.id)\"> habe</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:046.14\" id=\"46.2\" class=\"lt\" onclick=\"jumptoTime(46, this.id)\"> teuer</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:046.74\" id=\"46.8\" class=\"lt\" onclick=\"jumptoTime(46, this.id)\"> Pläne.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:047.48\" id=\"47.4\" class=\"lt\" onclick=\"jumptoTime(47, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:047.52\" id=\"47.6\" class=\"lt\" onclick=\"jumptoTime(47, this.id)\"> kaufe</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:047.94\" id=\"48.0\" class=\"lt\" onclick=\"jumptoTime(47, this.id)\"> mir</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:048.14\" id=\"48.2\" class=\"lt\" onclick=\"jumptoTime(48, this.id)\"> Baumaschinen,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:049.38\" id=\"49.4\" class=\"lt\" onclick=\"jumptoTime(49, this.id)\"> Wagen,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:049.90\" id=\"50.0\" class=\"lt\" onclick=\"jumptoTime(49, this.id)\"> Weizen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:050.44\" id=\"50.4\" class=\"lt\" onclick=\"jumptoTime(50, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:050.60\" id=\"50.6\" class=\"lt\" onclick=\"jumptoTime(50, this.id)\"> Kräne.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:051.04\" id=\"51.0\" class=\"lt\" onclick=\"jumptoTime(51, this.id)\"> Stürze</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:051.52\" id=\"51.6\" class=\"lt\" onclick=\"jumptoTime(51, this.id)\"> mich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:051.76\" id=\"51.8\" class=\"lt\" onclick=\"jumptoTime(51, this.id)\"> auf</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:052.10\" id=\"52.2\" class=\"lt\" onclick=\"jumptoTime(52, this.id)\"> Berlin</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:052.60\" id=\"52.6\" class=\"lt\" onclick=\"jumptoTime(52, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:052.90\" id=\"53.0\" class=\"lt\" onclick=\"jumptoTime(52, this.id)\"> drück</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:053.20\" id=\"53.2\" class=\"lt\" onclick=\"jumptoTime(53, this.id)\"> auf</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:053.42\" id=\"53.4\" class=\"lt\" onclick=\"jumptoTime(53, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:053.86\" id=\"53.8\" class=\"lt\" onclick=\"jumptoTime(53, this.id)\"> Sirene.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:054.70\" id=\"54.8\" class=\"lt\" onclick=\"jumptoTime(54, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:054.74\" id=\"54.8\" class=\"lt\" onclick=\"jumptoTime(54, this.id)\"> baue</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:055.04\" id=\"55.0\" class=\"lt\" onclick=\"jumptoTime(55, this.id)\"> schöne</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:055.48\" id=\"55.4\" class=\"lt\" onclick=\"jumptoTime(55, this.id)\"> Voxentür</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:056.32\" id=\"56.4\" class=\"lt\" onclick=\"jumptoTime(56, this.id)\"> mit</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:056.50\" id=\"56.6\" class=\"lt\" onclick=\"jumptoTime(56, this.id)\"> besser</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:056.74\" id=\"56.8\" class=\"lt\" onclick=\"jumptoTime(56, this.id)\"> massieren</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:057.32\" id=\"57.4\" class=\"lt\" onclick=\"jumptoTime(57, this.id)\"> eure</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:057.68\" id=\"57.6\" class=\"lt\" onclick=\"jumptoTime(57, this.id)\"> Seele.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:058.56\" id=\"58.6\" class=\"lt\" onclick=\"jumptoTime(58, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:058.76\" id=\"58.8\" class=\"lt\" onclick=\"jumptoTime(58, this.id)\"> bin</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:058.98\" id=\"59.0\" class=\"lt\" onclick=\"jumptoTime(58, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:00:059.20\" id=\"59.2\" class=\"lt\" onclick=\"jumptoTime(59, this.id)\"> Abrissmörder</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:000.12\" id=\"60.2\" class=\"lt\" onclick=\"jumptoTime(60, this.id)\"> für</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:000.36\" id=\"60.4\" class=\"lt\" onclick=\"jumptoTime(60, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:000.58\" id=\"60.6\" class=\"lt\" onclick=\"jumptoTime(60, this.id)\"> deutsche</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:001.22\" id=\"61.2\" class=\"lt\" onclick=\"jumptoTime(61, this.id)\"> Szene.</a><!--\n",
            "\t\t\t\t--></p>\n",
            "</div>\n",
            "<div class=\"e\" style=\"background-color: yellow\">\n",
            "<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\n",
            "<span style=\"color:darkblue;font-weight: bold;\">Speaker 03</span><br>\n",
            "\t\t\t\t<a href=\"#00:01:011.13\" id=\"71.2\" class=\"lt\" onclick=\"jumptoTime(71, this.id)\"> sixteen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:011.65\" id=\"71.6\" class=\"lt\" onclick=\"jumptoTime(71, this.id)\"> 15</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:012.13\" id=\"72.2\" class=\"lt\" onclick=\"jumptoTime(72, this.id)\"> den</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:014.11\" id=\"74.2\" class=\"lt\" onclick=\"jumptoTime(74, this.id)\"> Collaboradel</a><!--\n",
            "\t\t\t\t--></p>\n",
            "</div>\n",
            "<div class=\"e\" style=\"background-color: white\">\n",
            "<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\n",
            "<span style=\"color:darkorange;font-weight: bold;\">Speaker 02</span><br>\n",
            "\t\t\t\t<a href=\"#00:01:015.98\" id=\"76.0\" class=\"lt\" onclick=\"jumptoTime(75, this.id)\"> Die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:016.92\" id=\"77.0\" class=\"lt\" onclick=\"jumptoTime(76, this.id)\"> Welt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:017.42\" id=\"77.4\" class=\"lt\" onclick=\"jumptoTime(77, this.id)\"> mit</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:017.81\" id=\"77.8\" class=\"lt\" onclick=\"jumptoTime(77, this.id)\"> Staubetecken,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:019.53\" id=\"79.6\" class=\"lt\" onclick=\"jumptoTime(79, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:020.11\" id=\"80.2\" class=\"lt\" onclick=\"jumptoTime(80, this.id)\"> will</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:020.44\" id=\"80.4\" class=\"lt\" onclick=\"jumptoTime(80, this.id)\"> sehen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:020.89\" id=\"80.8\" class=\"lt\" onclick=\"jumptoTime(80, this.id)\"> wo</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:021.22\" id=\"81.2\" class=\"lt\" onclick=\"jumptoTime(81, this.id)\"> es</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:021.44\" id=\"81.4\" class=\"lt\" onclick=\"jumptoTime(81, this.id)\"> hingeht.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:023.41\" id=\"83.4\" class=\"lt\" onclick=\"jumptoTime(83, this.id)\"> Steigt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:024.31\" id=\"84.4\" class=\"lt\" onclick=\"jumptoTime(84, this.id)\"> auf</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:024.58\" id=\"84.6\" class=\"lt\" onclick=\"jumptoTime(84, this.id)\"> den</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:025.05\" id=\"85.0\" class=\"lt\" onclick=\"jumptoTime(85, this.id)\"> Berg</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:025.53\" id=\"85.6\" class=\"lt\" onclick=\"jumptoTime(85, this.id)\"> ausreckt,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:026.61\" id=\"86.6\" class=\"lt\" onclick=\"jumptoTime(86, this.id)\"> weil</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:026.83\" id=\"86.8\" class=\"lt\" onclick=\"jumptoTime(86, this.id)\"> oben</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:027.47\" id=\"87.4\" class=\"lt\" onclick=\"jumptoTime(87, this.id)\"> frischer</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:028.31\" id=\"88.4\" class=\"lt\" onclick=\"jumptoTime(88, this.id)\"> Wind</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:028.77\" id=\"88.8\" class=\"lt\" onclick=\"jumptoTime(88, this.id)\"> weht.</a><!--\n",
            "\t\t\t\t--></p>\n",
            "</div>\n",
            "<div class=\"e\" style=\"background-color: green\">\n",
            "<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\n",
            "<span style=\"color:black;font-weight: bold;\">Speaker 04</span><br>\n",
            "\t\t\t\t<a href=\"#00:01:033.20\" id=\"93.2\" class=\"lt\" onclick=\"jumptoTime(93, this.id)\"> Alles</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:033.56\" id=\"93.6\" class=\"lt\" onclick=\"jumptoTime(93, this.id)\"> geht</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:033.96\" id=\"94.0\" class=\"lt\" onclick=\"jumptoTime(93, this.id)\"> so</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:035.38\" id=\"95.4\" class=\"lt\" onclick=\"jumptoTime(95, this.id)\"> schön</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:035.68\" id=\"95.6\" class=\"lt\" onclick=\"jumptoTime(95, this.id)\"> neu</a><!--\n",
            "\t\t\t\t--></p>\n",
            "</div>\n",
            "<div class=\"e\" style=\"background-color: #e1ffc7\">\n",
            "<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\n",
            "<span style=\"color:darkgreen;font-weight: bold;\">Speaker 01</span><br>\n",
            "\t\t\t\t<a href=\"#00:01:044.42\" id=\"104.4\" class=\"lt\" onclick=\"jumptoTime(104, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:044.68\" id=\"104.6\" class=\"lt\" onclick=\"jumptoTime(104, this.id)\"> hab</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:044.86\" id=\"104.8\" class=\"lt\" onclick=\"jumptoTime(104, this.id)\"> meine</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:045.26\" id=\"105.2\" class=\"lt\" onclick=\"jumptoTime(105, this.id)\"> alten</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:045.66\" id=\"105.6\" class=\"lt\" onclick=\"jumptoTime(105, this.id)\"> Sachen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:046.10\" id=\"106.2\" class=\"lt\" onclick=\"jumptoTime(106, this.id)\"> satt,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:046.66\" id=\"106.6\" class=\"lt\" onclick=\"jumptoTime(106, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:046.76\" id=\"106.8\" class=\"lt\" onclick=\"jumptoTime(106, this.id)\"> lass</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:046.94\" id=\"107.0\" class=\"lt\" onclick=\"jumptoTime(106, this.id)\"> sie</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:047.22\" id=\"107.2\" class=\"lt\" onclick=\"jumptoTime(107, this.id)\"> in</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:047.34\" id=\"107.4\" class=\"lt\" onclick=\"jumptoTime(107, this.id)\"> einem</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:047.48\" id=\"107.4\" class=\"lt\" onclick=\"jumptoTime(107, this.id)\"> Sack</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:047.82\" id=\"107.8\" class=\"lt\" onclick=\"jumptoTime(107, this.id)\"> verrotten.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:048.56\" id=\"108.6\" class=\"lt\" onclick=\"jumptoTime(108, this.id)\"> Motze</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:048.88\" id=\"108.8\" class=\"lt\" onclick=\"jumptoTime(108, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:049.10\" id=\"109.2\" class=\"lt\" onclick=\"jumptoTime(109, this.id)\"> Klamotten</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:049.78\" id=\"109.8\" class=\"lt\" onclick=\"jumptoTime(109, this.id)\"> ein,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:050.32\" id=\"110.4\" class=\"lt\" onclick=\"jumptoTime(110, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:050.46\" id=\"110.4\" class=\"lt\" onclick=\"jumptoTime(110, this.id)\"> dann</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:050.70\" id=\"110.8\" class=\"lt\" onclick=\"jumptoTime(110, this.id)\"> geh</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:050.96\" id=\"111.0\" class=\"lt\" onclick=\"jumptoTime(110, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:051.12\" id=\"111.2\" class=\"lt\" onclick=\"jumptoTime(111, this.id)\"> nackt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:051.50\" id=\"111.6\" class=\"lt\" onclick=\"jumptoTime(111, this.id)\"> shoppen.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:052.08\" id=\"112.0\" class=\"lt\" onclick=\"jumptoTime(112, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:052.24\" id=\"112.2\" class=\"lt\" onclick=\"jumptoTime(112, this.id)\"> bin</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:052.42\" id=\"112.4\" class=\"lt\" onclick=\"jumptoTime(112, this.id)\"> komplett</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:052.94\" id=\"113.0\" class=\"lt\" onclick=\"jumptoTime(112, this.id)\"> renoviert,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:053.94\" id=\"114.0\" class=\"lt\" onclick=\"jumptoTime(113, this.id)\"> bräute</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:054.20\" id=\"114.2\" class=\"lt\" onclick=\"jumptoTime(114, this.id)\"> haben,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:054.76\" id=\"114.8\" class=\"lt\" onclick=\"jumptoTime(114, this.id)\"> was</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:054.86\" id=\"114.8\" class=\"lt\" onclick=\"jumptoTime(114, this.id)\"> zu</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:055.16\" id=\"115.2\" class=\"lt\" onclick=\"jumptoTime(115, this.id)\"> glotten.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:055.76\" id=\"115.8\" class=\"lt\" onclick=\"jumptoTime(115, this.id)\"> Kerngesund</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:056.28\" id=\"116.2\" class=\"lt\" onclick=\"jumptoTime(116, this.id)\"> durchzunieren,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:057.50\" id=\"117.6\" class=\"lt\" onclick=\"jumptoTime(117, this.id)\"> Feldmeister,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:058.40\" id=\"118.4\" class=\"lt\" onclick=\"jumptoTime(118, this.id)\"> Schach</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:058.60\" id=\"118.6\" class=\"lt\" onclick=\"jumptoTime(118, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:058.80\" id=\"118.8\" class=\"lt\" onclick=\"jumptoTime(118, this.id)\"> Posten.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:059.42\" id=\"119.4\" class=\"lt\" onclick=\"jumptoTime(119, this.id)\"> Nur</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:059.62\" id=\"119.6\" class=\"lt\" onclick=\"jumptoTime(119, this.id)\"> noch</a><!--\n",
            "\t\t\t\t--><a href=\"#00:01:059.90\" id=\"120.0\" class=\"lt\" onclick=\"jumptoTime(119, this.id)\"> konkret</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:000.44\" id=\"120.4\" class=\"lt\" onclick=\"jumptoTime(120, this.id)\"> reden,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:001.10\" id=\"121.2\" class=\"lt\" onclick=\"jumptoTime(121, this.id)\"> küppen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:001.28\" id=\"121.2\" class=\"lt\" onclick=\"jumptoTime(121, this.id)\"> wir</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:001.48\" id=\"121.4\" class=\"lt\" onclick=\"jumptoTime(121, this.id)\"> ein</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:001.70\" id=\"121.8\" class=\"lt\" onclick=\"jumptoTime(121, this.id)\"> Jahr</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:001.92\" id=\"122.0\" class=\"lt\" onclick=\"jumptoTime(121, this.id)\"> oder</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:002.26\" id=\"122.2\" class=\"lt\" onclick=\"jumptoTime(122, this.id)\"> nein.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:002.80\" id=\"122.8\" class=\"lt\" onclick=\"jumptoTime(122, this.id)\"> Schuss</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:002.98\" id=\"123.0\" class=\"lt\" onclick=\"jumptoTime(122, this.id)\"> mit</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:003.24\" id=\"123.2\" class=\"lt\" onclick=\"jumptoTime(123, this.id)\"> Larry</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:003.58\" id=\"123.6\" class=\"lt\" onclick=\"jumptoTime(123, this.id)\"> Fari,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:004.26\" id=\"124.2\" class=\"lt\" onclick=\"jumptoTime(124, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:004.40\" id=\"124.4\" class=\"lt\" onclick=\"jumptoTime(124, this.id)\"> lass</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:004.52\" id=\"124.6\" class=\"lt\" onclick=\"jumptoTime(124, this.id)\"> all</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:004.90\" id=\"125.0\" class=\"lt\" onclick=\"jumptoTime(124, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:005.04\" id=\"125.0\" class=\"lt\" onclick=\"jumptoTime(125, this.id)\"> alten</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:005.32\" id=\"125.4\" class=\"lt\" onclick=\"jumptoTime(125, this.id)\"> Sack</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:005.68\" id=\"125.6\" class=\"lt\" onclick=\"jumptoTime(125, this.id)\"> zu</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:005.94\" id=\"126.0\" class=\"lt\" onclick=\"jumptoTime(125, this.id)\"> sein.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:006.64\" id=\"126.6\" class=\"lt\" onclick=\"jumptoTime(126, this.id)\"> Sollte</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:007.02\" id=\"127.0\" class=\"lt\" onclick=\"jumptoTime(127, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:007.16\" id=\"127.2\" class=\"lt\" onclick=\"jumptoTime(127, this.id)\"> hier</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:007.28\" id=\"127.2\" class=\"lt\" onclick=\"jumptoTime(127, this.id)\"> wieder</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:007.62\" id=\"127.6\" class=\"lt\" onclick=\"jumptoTime(127, this.id)\"> kippen,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:008.32\" id=\"128.4\" class=\"lt\" onclick=\"jumptoTime(128, this.id)\"> hau</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:008.44\" id=\"128.4\" class=\"lt\" onclick=\"jumptoTime(128, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:008.60\" id=\"128.6\" class=\"lt\" onclick=\"jumptoTime(128, this.id)\"> mir</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:008.82\" id=\"128.8\" class=\"lt\" onclick=\"jumptoTime(128, this.id)\"> ne</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:009.02\" id=\"129.0\" class=\"lt\" onclick=\"jumptoTime(129, this.id)\"> Axt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:009.34\" id=\"129.4\" class=\"lt\" onclick=\"jumptoTime(129, this.id)\"> in</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:009.54\" id=\"129.6\" class=\"lt\" onclick=\"jumptoTime(129, this.id)\"> zwei.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:010.04\" id=\"130.0\" class=\"lt\" onclick=\"jumptoTime(130, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:010.22\" id=\"130.2\" class=\"lt\" onclick=\"jumptoTime(130, this.id)\"> will</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:010.38\" id=\"130.4\" class=\"lt\" onclick=\"jumptoTime(130, this.id)\"> nie</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:010.64\" id=\"130.6\" class=\"lt\" onclick=\"jumptoTime(130, this.id)\"> mehr</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:010.84\" id=\"130.8\" class=\"lt\" onclick=\"jumptoTime(130, this.id)\"> lügen,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:011.34\" id=\"131.4\" class=\"lt\" onclick=\"jumptoTime(131, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:011.50\" id=\"131.6\" class=\"lt\" onclick=\"jumptoTime(131, this.id)\"> will</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:011.68\" id=\"131.6\" class=\"lt\" onclick=\"jumptoTime(131, this.id)\"> jeden</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:012.02\" id=\"132.0\" class=\"lt\" onclick=\"jumptoTime(132, this.id)\"> Satt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:012.62\" id=\"132.6\" class=\"lt\" onclick=\"jumptoTime(132, this.id)\"> auch</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:012.86\" id=\"132.8\" class=\"lt\" onclick=\"jumptoTime(132, this.id)\"> so</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:013.08\" id=\"133.0\" class=\"lt\" onclick=\"jumptoTime(133, this.id)\"> meinen.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:013.38\" id=\"133.4\" class=\"lt\" onclick=\"jumptoTime(133, this.id)\"> Mir</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:014.10\" id=\"134.2\" class=\"lt\" onclick=\"jumptoTime(134, this.id)\"> flasst</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:014.74\" id=\"134.8\" class=\"lt\" onclick=\"jumptoTime(134, this.id)\"> der</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:014.86\" id=\"134.8\" class=\"lt\" onclick=\"jumptoTime(134, this.id)\"> Krop,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:015.44\" id=\"135.4\" class=\"lt\" onclick=\"jumptoTime(135, this.id)\"> alles</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:015.74\" id=\"135.8\" class=\"lt\" onclick=\"jumptoTime(135, this.id)\"> muss</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:016.20\" id=\"136.2\" class=\"lt\" onclick=\"jumptoTime(136, this.id)\"> sich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:016.48\" id=\"136.4\" class=\"lt\" onclick=\"jumptoTime(136, this.id)\"> verändern.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:017.34\" id=\"137.4\" class=\"lt\" onclick=\"jumptoTime(137, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:017.76\" id=\"137.8\" class=\"lt\" onclick=\"jumptoTime(137, this.id)\"> such</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:018.04\" id=\"138.0\" class=\"lt\" onclick=\"jumptoTime(138, this.id)\"> den</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:018.38\" id=\"138.4\" class=\"lt\" onclick=\"jumptoTime(138, this.id)\"> Krop,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:018.96\" id=\"139.0\" class=\"lt\" onclick=\"jumptoTime(138, this.id)\"> treffe</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:019.32\" id=\"139.4\" class=\"lt\" onclick=\"jumptoTime(139, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:019.54\" id=\"139.6\" class=\"lt\" onclick=\"jumptoTime(139, this.id)\"> mächtigen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:020.16\" id=\"140.2\" class=\"lt\" onclick=\"jumptoTime(140, this.id)\"> Männer,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:020.80\" id=\"140.8\" class=\"lt\" onclick=\"jumptoTime(140, this.id)\"> springen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:021.18\" id=\"141.2\" class=\"lt\" onclick=\"jumptoTime(141, this.id)\"> das</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:021.34\" id=\"141.4\" class=\"lt\" onclick=\"jumptoTime(141, this.id)\"> Land</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:021.62\" id=\"141.6\" class=\"lt\" onclick=\"jumptoTime(141, this.id)\"> zum</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:022.00\" id=\"142.0\" class=\"lt\" onclick=\"jumptoTime(142, this.id)\"> Glück.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:023.10\" id=\"143.2\" class=\"lt\" onclick=\"jumptoTime(143, this.id)\"> Kaufverbanden</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:023.66\" id=\"143.6\" class=\"lt\" onclick=\"jumptoTime(143, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:023.78\" id=\"143.8\" class=\"lt\" onclick=\"jumptoTime(143, this.id)\"> Sender,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:024.36\" id=\"144.4\" class=\"lt\" onclick=\"jumptoTime(144, this.id)\"> alles</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:024.66\" id=\"144.6\" class=\"lt\" onclick=\"jumptoTime(144, this.id)\"> spielt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:025.22\" id=\"145.2\" class=\"lt\" onclick=\"jumptoTime(145, this.id)\"> verrückt.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:026.12\" id=\"146.2\" class=\"lt\" onclick=\"jumptoTime(146, this.id)\"> Zittern</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:026.56\" id=\"146.6\" class=\"lt\" onclick=\"jumptoTime(146, this.id)\"> ist</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:026.74\" id=\"146.8\" class=\"lt\" onclick=\"jumptoTime(146, this.id)\"> Schaf</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:027.14\" id=\"147.2\" class=\"lt\" onclick=\"jumptoTime(147, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:027.34\" id=\"147.4\" class=\"lt\" onclick=\"jumptoTime(147, this.id)\"> Lämmer.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:027.94\" id=\"148.0\" class=\"lt\" onclick=\"jumptoTime(147, this.id)\"> Ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:028.06\" id=\"148.0\" class=\"lt\" onclick=\"jumptoTime(148, this.id)\"> seh'</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:028.38\" id=\"148.4\" class=\"lt\" onclick=\"jumptoTime(148, this.id)\"> besser</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:028.66\" id=\"148.6\" class=\"lt\" onclick=\"jumptoTime(148, this.id)\"> aus</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:028.98\" id=\"149.0\" class=\"lt\" onclick=\"jumptoTime(148, this.id)\"> als</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:029.18\" id=\"149.2\" class=\"lt\" onclick=\"jumptoTime(149, this.id)\"> Bono</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:029.72\" id=\"149.8\" class=\"lt\" onclick=\"jumptoTime(149, this.id)\"> und</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:029.88\" id=\"149.8\" class=\"lt\" onclick=\"jumptoTime(149, this.id)\"> bin</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:030.14\" id=\"150.2\" class=\"lt\" onclick=\"jumptoTime(150, this.id)\"> ein</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:030.34\" id=\"150.4\" class=\"lt\" onclick=\"jumptoTime(150, this.id)\"> Mann</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:030.50\" id=\"150.6\" class=\"lt\" onclick=\"jumptoTime(150, this.id)\"> des</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:030.74\" id=\"150.8\" class=\"lt\" onclick=\"jumptoTime(150, this.id)\"> Volkes.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:031.34\" id=\"151.4\" class=\"lt\" onclick=\"jumptoTime(151, this.id)\"> Vielleicht</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:031.58\" id=\"151.6\" class=\"lt\" onclick=\"jumptoTime(151, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:031.90\" id=\"152.0\" class=\"lt\" onclick=\"jumptoTime(151, this.id)\"> Welt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:032.18\" id=\"152.2\" class=\"lt\" onclick=\"jumptoTime(152, this.id)\"> zu</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:032.38\" id=\"152.4\" class=\"lt\" onclick=\"jumptoTime(152, this.id)\"> retten,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:032.86\" id=\"152.8\" class=\"lt\" onclick=\"jumptoTime(152, this.id)\"> auch</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:033.04\" id=\"153.0\" class=\"lt\" onclick=\"jumptoTime(153, this.id)\"> wenn</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:033.32\" id=\"153.4\" class=\"lt\" onclick=\"jumptoTime(153, this.id)\"> das</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:033.54\" id=\"153.6\" class=\"lt\" onclick=\"jumptoTime(153, this.id)\"> vielleicht</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:033.82\" id=\"153.8\" class=\"lt\" onclick=\"jumptoTime(153, this.id)\"> zu</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:034.14\" id=\"154.2\" class=\"lt\" onclick=\"jumptoTime(154, this.id)\"> viel</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:034.44\" id=\"154.4\" class=\"lt\" onclick=\"jumptoTime(154, this.id)\"> du</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:034.58\" id=\"154.6\" class=\"lt\" onclick=\"jumptoTime(154, this.id)\"> wolltest.</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:035.42\" id=\"155.4\" class=\"lt\" onclick=\"jumptoTime(155, this.id)\"> Hey!</a><!--\n",
            "\t\t\t\t--></p>\n",
            "</div>\n",
            "<div class=\"e\" style=\"background-color: yellow\">\n",
            "<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\n",
            "<span style=\"color:darkblue;font-weight: bold;\">Speaker 03</span><br>\n",
            "\t\t\t\t<a href=\"#00:02:044.29\" id=\"164.2\" class=\"lt\" onclick=\"jumptoTime(164, this.id)\"> describes</a><!--\n",
            "\t\t\t\t--></p>\n",
            "</div>\n",
            "<div class=\"e\" style=\"background-color: white\">\n",
            "<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\n",
            "<span style=\"color:darkorange;font-weight: bold;\">Speaker 02</span><br>\n",
            "\t\t\t\t<a href=\"#00:02:049.49\" id=\"169.4\" class=\"lt\" onclick=\"jumptoTime(169, this.id)\"> Hier</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:050.15\" id=\"170.2\" class=\"lt\" onclick=\"jumptoTime(170, this.id)\"> ist</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:050.63\" id=\"170.6\" class=\"lt\" onclick=\"jumptoTime(170, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:050.99\" id=\"171.0\" class=\"lt\" onclick=\"jumptoTime(170, this.id)\"> Luft,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:051.69\" id=\"171.6\" class=\"lt\" onclick=\"jumptoTime(171, this.id)\"> da</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:051.93\" id=\"172.0\" class=\"lt\" onclick=\"jumptoTime(171, this.id)\"> braucht</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:052.37\" id=\"172.4\" class=\"lt\" onclick=\"jumptoTime(172, this.id)\"> das</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:052.83\" id=\"172.8\" class=\"lt\" onclick=\"jumptoTime(172, this.id)\"> Atmenfeld</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:053.95\" id=\"174.0\" class=\"lt\" onclick=\"jumptoTime(173, this.id)\"> mir</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:054.33\" id=\"174.4\" class=\"lt\" onclick=\"jumptoTime(174, this.id)\"> Steher</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:056.85\" id=\"176.8\" class=\"lt\" onclick=\"jumptoTime(176, this.id)\"> Beibei</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:057.77\" id=\"177.8\" class=\"lt\" onclick=\"jumptoTime(177, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:058.27\" id=\"178.2\" class=\"lt\" onclick=\"jumptoTime(178, this.id)\"> muss</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:058.61\" id=\"178.6\" class=\"lt\" onclick=\"jumptoTime(178, this.id)\"> hier</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:059.05\" id=\"179.0\" class=\"lt\" onclick=\"jumptoTime(179, this.id)\"> raus,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:059.71\" id=\"179.8\" class=\"lt\" onclick=\"jumptoTime(179, this.id)\"> die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:02:059.95\" id=\"180.0\" class=\"lt\" onclick=\"jumptoTime(179, this.id)\"> Wände</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:000.63\" id=\"180.6\" class=\"lt\" onclick=\"jumptoTime(180, this.id)\"> kommen</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:001.17\" id=\"181.2\" class=\"lt\" onclick=\"jumptoTime(181, this.id)\"> näher</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:003.49\" id=\"183.4\" class=\"lt\" onclick=\"jumptoTime(183, this.id)\"> Die</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:004.43\" id=\"184.4\" class=\"lt\" onclick=\"jumptoTime(184, this.id)\"> Welt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:004.93\" id=\"185.0\" class=\"lt\" onclick=\"jumptoTime(184, this.id)\"> mit</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:005.27\" id=\"185.2\" class=\"lt\" onclick=\"jumptoTime(185, this.id)\"> Schnaufe</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:006.13\" id=\"186.2\" class=\"lt\" onclick=\"jumptoTime(186, this.id)\"> deckt,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:006.95\" id=\"187.0\" class=\"lt\" onclick=\"jumptoTime(186, this.id)\"> doch</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:007.11\" id=\"187.2\" class=\"lt\" onclick=\"jumptoTime(187, this.id)\"> ich</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:007.65\" id=\"187.6\" class=\"lt\" onclick=\"jumptoTime(187, this.id)\"> will</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:007.93\" id=\"188.0\" class=\"lt\" onclick=\"jumptoTime(187, this.id)\"> sehen,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:008.33\" id=\"188.4\" class=\"lt\" onclick=\"jumptoTime(188, this.id)\"> wo's</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:008.97\" id=\"189.0\" class=\"lt\" onclick=\"jumptoTime(188, this.id)\"> hingeht</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:010.91\" id=\"191.0\" class=\"lt\" onclick=\"jumptoTime(190, this.id)\"> Steigt</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:011.79\" id=\"191.8\" class=\"lt\" onclick=\"jumptoTime(191, this.id)\"> auf</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:012.07\" id=\"192.0\" class=\"lt\" onclick=\"jumptoTime(192, this.id)\"> den</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:012.51\" id=\"192.6\" class=\"lt\" onclick=\"jumptoTime(192, this.id)\"> Berg,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:013.21\" id=\"193.2\" class=\"lt\" onclick=\"jumptoTime(193, this.id)\"> ausreckt,</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:014.09\" id=\"194.0\" class=\"lt\" onclick=\"jumptoTime(194, this.id)\"> weil</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:014.31\" id=\"194.4\" class=\"lt\" onclick=\"jumptoTime(194, this.id)\"> oben</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:014.97\" id=\"195.0\" class=\"lt\" onclick=\"jumptoTime(194, this.id)\"> frisch</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:015.63\" id=\"195.6\" class=\"lt\" onclick=\"jumptoTime(195, this.id)\"> ab</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:015.85\" id=\"195.8\" class=\"lt\" onclick=\"jumptoTime(195, this.id)\"> ist</a><!--\n",
            "\t\t\t\t--></p>\n",
            "</div>\n",
            "<div class=\"e\" style=\"background-color: green\">\n",
            "<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\n",
            "<span style=\"color:black;font-weight: bold;\">Speaker 04</span><br>\n",
            "\t\t\t\t<a href=\"#00:03:020.74\" id=\"200.8\" class=\"lt\" onclick=\"jumptoTime(200, this.id)\"> Alles</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:021.04\" id=\"201.0\" class=\"lt\" onclick=\"jumptoTime(201, this.id)\"> klar</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:022.48\" id=\"202.4\" class=\"lt\" onclick=\"jumptoTime(202, this.id)\"> So</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:022.84\" id=\"202.8\" class=\"lt\" onclick=\"jumptoTime(202, this.id)\"> schnell</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:023.22\" id=\"203.2\" class=\"lt\" onclick=\"jumptoTime(203, this.id)\"> ist</a><!--\n",
            "\t\t\t\t--><a href=\"#00:03:023.56\" id=\"203.6\" class=\"lt\" onclick=\"jumptoTime(203, this.id)\"> es</a><!--\n",
            "\t\t\t\t--></p>\n",
            "</div>\n",
            "\t</body>\n",
            "</html>\n",
            "\n"
          ]
        }
      ],
      "source": [
        "#import webvtt\n",
        "\n",
        "def timeStr(t):\n",
        "  return '{0:02d}:{1:02d}:{2:06.2f}'.format(round(t // 3600),\n",
        "                                                round(t % 3600 // 60),\n",
        "                                                t % 60)\n",
        "\n",
        "html = list(preS)\n",
        "txt = list(\"\")\n",
        "gidx = -1\n",
        "for g in groups:\n",
        "  shift = re.findall('[0-9]+:[0-9]+:[0-9]+\\.[0-9]+', string=g[0])[0]\n",
        "  shift = millisec(shift) - spacermilli #the start time in the original video\n",
        "  shift=max(shift, 0)\n",
        "\n",
        "  gidx += 1\n",
        "\n",
        "  captions = json.load(open(str(gidx) + '.json'))['segments']\n",
        "\n",
        "  if captions:\n",
        "    speaker = g[0].split()[-1]\n",
        "    boxclr = def_boxclr\n",
        "    spkrclr = def_spkrclr\n",
        "    if speaker in speakers:\n",
        "      speaker, boxclr, spkrclr = speakers[speaker]\n",
        "\n",
        "    html.append(f'<div class=\"e\" style=\"background-color: {boxclr}\">\\n');\n",
        "    html.append('<p  style=\"margin:0;padding: 5px 10px 10px 10px;word-wrap:normal;white-space:normal;\">\\n')\n",
        "    html.append(f'<span style=\"color:{spkrclr};font-weight: bold;\">{speaker}</span><br>\\n\\t\\t\\t\\t')\n",
        "\n",
        "    for c in captions:\n",
        "      start = shift + c['start'] * 1000.0\n",
        "      start = start / 1000.0   #time resolution ot youtube is Second.\n",
        "      end = (shift + c['end'] * 1000.0) / 1000.0\n",
        "      txt.append(f'[{timeStr(start)} --> {timeStr(end)}] [{speaker}] {c[\"text\"]}\\n')\n",
        "\n",
        "      for i, w in enumerate(c['words']):\n",
        "        if w == \"\":\n",
        "           continue\n",
        "        start = (shift + w['start']*1000.0) / 1000.0\n",
        "        #end = (shift + w['end']) / 1000.0   #time resolution ot youtube is Second.\n",
        "        html.append(f'<a href=\"#{timeStr(start)}\" id=\"{\"{:.1f}\".format(round(start*5)/5)}\" class=\"lt\" onclick=\"jumptoTime({int(start)}, this.id)\">{w[\"word\"]}</a><!--\\n\\t\\t\\t\\t-->')\n",
        "    #html.append('\\n')\n",
        "    html.append('</p>\\n')\n",
        "    html.append(f'</div>\\n')\n",
        "\n",
        "html.append(postS)\n",
        "\n",
        "\n",
        "with open(f\"capspeaker.txt\", \"w\", encoding='utf-8') as file:\n",
        "  s = \"\".join(txt)\n",
        "  file.write(s)\n",
        "  print('captions saved to capspeaker.txt:')\n",
        "  print(s+'\\n')\n",
        "\n",
        "with open(f\"capspeaker.html\", \"w\", encoding='utf-8') as file:    #TODO: proper html embed tag when video/audio from file\n",
        "  s = \"\".join(html)\n",
        "  file.write(s)\n",
        "  print('captions saved to capspeaker.html:')\n",
        "  print(s+'\\n')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RQyROdrfsvk4"
      },
      "source": [
        "[![notebook shield](https://img.shields.io/static/v1?label=&message=Notebook&color=blue&style=for-the-badge&logo=googlecolab&link=https://colab.research.google.com/github/ArthurFDLR/whisper-youtube/blob/main/whisper_youtube.ipynb)](https://colab.research.google.com/github/Majdoddin/nlp/blob/main/Pyannote_plays_and_Whisper_rhymes_v_2_0.ipynb)\n",
        "[![repository shield](https://img.shields.io/static/v1?label=&message=Repository&color=blue&style=for-the-badge&logo=github&link=https://github.com/openai/whisper)](https://github.com/majdoddin/nlp)\n",
        "\n",
        "# Whisper's transcription plus Pyannote's Diarization\n",
        "\n",
        "**Update** - [@johnwyles](https://github.com/johnwyles) added HTML output for audio/video files from Google Drive, along with some fixes.\n",
        "\n",
        "Using the new word-level timestamping of Whisper, the transcription words are highlighted as the video plays, with optional autoscroll. And the display on small displays is improved.\n",
        "\n",
        "Moreover, the model is loaded just once, thus the whole thing runs much faster now. You can also hardcode your Huggingface token.\n",
        "\n",
        "---\n",
        "Andrej Karpathy [suggested](https://twitter.com/karpathy/status/1574476200801538048?s=20&t=s5IMMXOYjBI6-91dib6w8g) training a classifier on top of  OpenAI [Whisper](https://openai.com/blog/whisper/) model features to identify the speaker, so we can visualize the speaker in the transcript. But, as [pointed out](https://twitter.com/tarantulae/status/1574493613362388992?s=20&t=s5IMMXOYjBI6-91dib6w8g) by Christian Perone, it seems that features from whisper wouldn't be that great for speaker recognition as its main objective is basically to ignore speaker differences.\n",
        "\n",
        "In the following, I use [**`pyannote-audio`**](https://github.com/pyannote/pyannote-audio), a speaker diarization toolkit by Hervé Bredin, to identify the speakers, and then match it with the transcriptions of Whispr, linked to the video. The input can be YouTube or an video/audio file (also on Google Drive). I try it on a [Customer Support Call](https://youtu.be/hpZFJctBUHQ). Check the result [**here**](https://majdoddin.github.io/dyson.html).\n",
        "\n",
        "To make it easier to match the transcriptions to diarizations by speaker change, Sarah Kaiser [suggested](https://github.com/openai/whisper/discussions/264#discussioncomment-3825375) runnnig the pyannote.audio first and  then just running whisper on the split-by-speaker chunks.\n",
        "For sake of performance (and transcription quality?), we attach the audio segments into a single audio file with a silent spacer as a separator, and run whisper on it. Enjoy it!\n",
        "\n",
        "(For sake of performance , I also tried attaching the audio segments into a single audio file with a silent -or beep- spacer as a separator, and run whisper on it see it on [colab](https://colab.research.google.com/drive/1HuvcY4tkTHPDzcwyVH77LCh_m8tP-Qet?usp=sharing). It [works](https://majdoddin.github.io/lexicap.html) on some audio, and fails on some (Dyson's Interview). The problem is, whisper does not reliably make a timestap on a spacer. See the discussions [#139](https://github.com/openai/whisper/discussions/139) and [#29](https://github.com/openai/whisper/discussions/29))\n",
        "\n",
        "The Markdown form used below is from [@ArthurFDLR](https://github.com/ArthurFDLR/whisper-youtube/).   "
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "machine_shape": "hm",
      "provenance": [],
      "gpuType": "V100",
      "collapsed_sections": [
        "nfvIZ67J3Brq",
        "z_bYuLyB6ZP_",
        "mb5eEOKUooju"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
